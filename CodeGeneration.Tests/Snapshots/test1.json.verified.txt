//----------------------
// <auto-generated>
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export type ValueDto = string | number | number | boolean;

export enum FilterOperator {
    Is = "is",
    Is_not = "is not",
    In = "in",
    Not_in = "not in",
    Gt = ">",
    Ge = ">=",
    Lt = "<",
    Le = "<=",
    Contains = "contains",
}

export class FilterValueDto implements IFilterValueDto {
    attributeName!: string;
    operationCode!: FilterOperator;
    value?: ValueDto;
    values?: any[];

    [key: string]: any;

    constructor(data?: IFilterValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.attributeName = _data["attributeName"];
            this.operationCode = _data["operationCode"];
            this.value = _data["value"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(item);
            }
        }
    }

    static fromJS(data: any): FilterValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new FilterValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["attributeName"] = this.attributeName;
        data["operationCode"] = this.operationCode;
        data["value"] = this.value;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item);
        }
        return data;
    }
}

export interface IFilterValueDto {
    attributeName: string;
    operationCode: FilterOperator;
    value?: ValueDto;
    values?: any[];

    [key: string]: any;
}

