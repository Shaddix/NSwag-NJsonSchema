//----------------------
// <auto-generated>
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class LocationCriteriaDto implements ILocationCriteriaDto {
    criteriaType!: LocationCriteriaType;

    [key: string]: any;

    protected _discriminator: string;

    constructor(data?: ILocationCriteriaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "LocationCriteriaDto";
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.criteriaType = _data["criteriaType"];
        }
    }

    static fromJS(data: any): LocationCriteriaDto {
        data = typeof data === 'object' ? data : {};
        if (data["criteriaType"] === "AttributePresentLocationCriteriaDto") {
            let result = new AttributePresentLocationCriteriaDto();
            result.init(data);
            return result;
        }
        if (data["criteriaType"] === "ParentIdLocationCriteriaDto") {
            let result = new ParentIdLocationCriteriaDto();
            result.init(data);
            return result;
        }
        let result = new LocationCriteriaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["criteriaType"] = this._discriminator;
        data["criteriaType"] = this.criteriaType;
        return data;
    }
}

export interface ILocationCriteriaDto {
    criteriaType: LocationCriteriaType;

    [key: string]: any;
}

export class AttributePresentLocationCriteriaDto extends LocationCriteriaDto implements IAttributePresentLocationCriteriaDto {
    attributeName!: string;
    criteriaType!: LocationCriteriaType;

    [key: string]: any;

    constructor(data?: IAttributePresentLocationCriteriaDto) {
        super(data);
        this._discriminator = "AttributePresentLocationCriteriaDto";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.attributeName = _data["attributeName"];
            this.criteriaType = _data["criteriaType"];
        }
    }

    static override fromJS(data: any): AttributePresentLocationCriteriaDto {
        data = typeof data === 'object' ? data : {};
        let result = new AttributePresentLocationCriteriaDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["attributeName"] = this.attributeName;
        data["criteriaType"] = this.criteriaType;
        super.toJSON(data);
        return data;
    }
}

export interface IAttributePresentLocationCriteriaDto extends ILocationCriteriaDto {
    attributeName: string;
    criteriaType: LocationCriteriaType;

    [key: string]: any;
}

export enum LocationCriteriaType {
    PARENT_ID = "PARENT_ID",
    ATTRIBUTE_PRESENT = "ATTRIBUTE_PRESENT",
}

export enum LocationType {
    LOCATION = "LOCATION",
    ZONE = "ZONE",
}

export class ParentIdLocationCriteriaDto extends LocationCriteriaDto implements IParentIdLocationCriteriaDto {
    parentLocationId?: number;
    locationType?: LocationType;
    criteriaType!: LocationCriteriaType;

    [key: string]: any;

    constructor(data?: IParentIdLocationCriteriaDto) {
        super(data);
        this._discriminator = "ParentIdLocationCriteriaDto";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.parentLocationId = _data["parentLocationId"];
            this.locationType = _data["locationType"];
            this.criteriaType = _data["criteriaType"];
        }
    }

    static override fromJS(data: any): ParentIdLocationCriteriaDto {
        data = typeof data === 'object' ? data : {};
        let result = new ParentIdLocationCriteriaDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["parentLocationId"] = this.parentLocationId;
        data["locationType"] = this.locationType;
        data["criteriaType"] = this.criteriaType;
        super.toJSON(data);
        return data;
    }
}

export interface IParentIdLocationCriteriaDto extends ILocationCriteriaDto {
    parentLocationId?: number;
    locationType?: LocationType;
    criteriaType: LocationCriteriaType;

    [key: string]: any;
}

