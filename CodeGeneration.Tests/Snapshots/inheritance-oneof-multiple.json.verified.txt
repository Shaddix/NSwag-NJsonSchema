//----------------------
// <auto-generated>
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class CompleteFilterExpressionDto implements ICompleteFilterExpressionDto {
    parentId?: string;

    [key: string]: any;

    protected _discriminator: string;

    constructor(data?: ICompleteFilterExpressionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "CompleteFilterExpressionDto";
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): CompleteFilterExpressionDto {
        data = typeof data === 'object' ? data : {};
        if (data["filterExpressionType"] === "AttributeFilterExpressionDto") {
            let result = new AttributeFilterExpressionDto();
            result.init(data);
            return result;
        }
        if (data["filterExpressionType"] === "GroupFilterExpressionDto") {
            let result = new GroupFilterExpressionDto();
            result.init(data);
            return result;
        }
        let result = new CompleteFilterExpressionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["filterExpressionType"] = this._discriminator;
        data["parentId"] = this.parentId;
        return data;
    }
}

export interface ICompleteFilterExpressionDto {
    parentId?: string;

    [key: string]: any;
}

export class AttributeFilterExpressionDto extends CompleteFilterExpressionDto implements IAttributeFilterExpressionDto {
    parentId?: string;
    attributeName!: string;

    [key: string]: any;

    constructor(data?: IAttributeFilterExpressionDto) {
        super(data);
        this._discriminator = "AttributeFilterExpressionDto";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.parentId = _data["parentId"];
            this.attributeName = _data["attributeName"];
        }
    }

    static override fromJS(data: any): AttributeFilterExpressionDto {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeFilterExpressionDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["parentId"] = this.parentId;
        data["attributeName"] = this.attributeName;
        super.toJSON(data);
        return data;
    }
}

export interface IAttributeFilterExpressionDto extends ICompleteFilterExpressionDto {
    parentId?: string;
    attributeName: string;

    [key: string]: any;
}

export class GroupFilterExpressionDto extends CompleteFilterExpressionDto implements IGroupFilterExpressionDto {
    parentId?: string;
    filterExpressions!: CompleteFilterExpressionDto[];

    [key: string]: any;

    constructor(data?: IGroupFilterExpressionDto) {
        super(data);
        if (!data) {
            this.filterExpressions = [];
        }
        this._discriminator = "GroupFilterExpressionDto";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.parentId = _data["parentId"];
            if (Array.isArray(_data["filterExpressions"])) {
                this.filterExpressions = [] as any;
                for (let item of _data["filterExpressions"])
                    this.filterExpressions!.push(CompleteFilterExpressionDto.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): GroupFilterExpressionDto {
        data = typeof data === 'object' ? data : {};
        let result = new GroupFilterExpressionDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["parentId"] = this.parentId;
        if (Array.isArray(this.filterExpressions)) {
            data["filterExpressions"] = [];
            for (let item of this.filterExpressions)
                data["filterExpressions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGroupFilterExpressionDto extends ICompleteFilterExpressionDto {
    parentId?: string;
    filterExpressions: CompleteFilterExpressionDto[];

    [key: string]: any;
}

export class FilterExpressionDto implements IFilterExpressionDto {

    [key: string]: any;

    protected _discriminator: string;

    constructor(data?: IFilterExpressionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "FilterExpressionDto";
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): FilterExpressionDto {
        data = typeof data === 'object' ? data : {};
        if (data["filterExpressionType"] === "ExpressionForExistingAttributeFilterDto") {
            let result = new ExpressionForExistingAttributeFilterDto();
            result.init(data);
            return result;
        }
        if (data["filterExpressionType"] === "AttributeFilterExpressionDto_FilterExpressionDto") {
            let result = new AttributeFilterExpressionDto_FilterExpressionDto();
            result.init(data);
            return result;
        }
        if (data["filterExpressionType"] === "GroupFilterExpressionDto_FilterExpressionDto") {
            let result = new GroupFilterExpressionDto_FilterExpressionDto();
            result.init(data);
            return result;
        }
        let result = new FilterExpressionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["filterExpressionType"] = this._discriminator;
        return data;
    }
}

export interface IFilterExpressionDto {

    [key: string]: any;
}

export class ExpressionForExistingAttributeFilterDto extends FilterExpressionDto implements IExpressionForExistingAttributeFilterDto {
    filterId!: string;
    value?: string;

    [key: string]: any;

    constructor(data?: IExpressionForExistingAttributeFilterDto) {
        super(data);
        this._discriminator = "ExpressionForExistingAttributeFilterDto";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.filterId = _data["filterId"];
            this.value = _data["value"];
        }
    }

    static override fromJS(data: any): ExpressionForExistingAttributeFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExpressionForExistingAttributeFilterDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["filterId"] = this.filterId;
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IExpressionForExistingAttributeFilterDto extends IFilterExpressionDto {
    filterId: string;
    value?: string;

    [key: string]: any;
}

export class AttributeFilterExpressionDto_FilterExpressionDto extends FilterExpressionDto implements IAttributeFilterExpressionDto_FilterExpressionDto {
    parentId?: string;
    attributeName!: string;

    [key: string]: any;

    constructor(data?: IAttributeFilterExpressionDto_FilterExpressionDto) {
        super(data);
        this._discriminator = "AttributeFilterExpressionDto_FilterExpressionDto";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.parentId = _data["parentId"];
            this.attributeName = _data["attributeName"];
        }
    }

    static override fromJS(data: any): AttributeFilterExpressionDto_FilterExpressionDto {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeFilterExpressionDto_FilterExpressionDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["parentId"] = this.parentId;
        data["attributeName"] = this.attributeName;
        super.toJSON(data);
        return data;
    }
}

export interface IAttributeFilterExpressionDto_FilterExpressionDto extends IFilterExpressionDto {
    parentId?: string;
    attributeName: string;

    [key: string]: any;
}

export class GroupFilterExpressionDto_FilterExpressionDto extends FilterExpressionDto implements IGroupFilterExpressionDto_FilterExpressionDto {
    parentId?: string;
    filterExpressions!: CompleteFilterExpressionDto[];

    [key: string]: any;

    constructor(data?: IGroupFilterExpressionDto_FilterExpressionDto) {
        super(data);
        if (!data) {
            this.filterExpressions = [];
        }
        this._discriminator = "GroupFilterExpressionDto_FilterExpressionDto";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.parentId = _data["parentId"];
            if (Array.isArray(_data["filterExpressions"])) {
                this.filterExpressions = [] as any;
                for (let item of _data["filterExpressions"])
                    this.filterExpressions!.push(CompleteFilterExpressionDto.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): GroupFilterExpressionDto_FilterExpressionDto {
        data = typeof data === 'object' ? data : {};
        let result = new GroupFilterExpressionDto_FilterExpressionDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["parentId"] = this.parentId;
        if (Array.isArray(this.filterExpressions)) {
            data["filterExpressions"] = [];
            for (let item of this.filterExpressions)
                data["filterExpressions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGroupFilterExpressionDto_FilterExpressionDto extends IFilterExpressionDto {
    parentId?: string;
    filterExpressions: CompleteFilterExpressionDto[];

    [key: string]: any;
}

