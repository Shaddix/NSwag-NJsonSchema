//----------------------
// <auto-generated>
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace MyNamespace
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://realm.mongodb.com/api/admin/v3.0";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// List App Services Admin Auth Providers
        /// </summary>
        /// <returns>Successfully enumerated available authentication providers.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<object>> GetAdminAuthProvidersAsync()
        {
            return GetAdminAuthProvidersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List App Services Admin Auth Providers
        /// </summary>
        /// <returns>Successfully enumerated available authentication providers.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<object>> GetAdminAuthProvidersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/auth/providers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Authenticate as an App Services administrator
        /// </summary>
        /// <remarks>
        /// Authenticate as an App Services administrator using an Atlas
        /// <br/>programmatic API key pair. To learn more, see [Get An Admin API
        /// <br/>Session Access Token](#get-an-admin-api-session-access-token).
        /// </remarks>
        /// <param name="provider">The authentication provider to use.</param>
        /// <returns>Authentication was successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> AdminLoginAsync(Body body, ProviderType provider)
        {
            return AdminLoginAsync(body, provider, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Authenticate as an App Services administrator
        /// </summary>
        /// <remarks>
        /// Authenticate as an App Services administrator using an Atlas
        /// <br/>programmatic API key pair. To learn more, see [Get An Admin API
        /// <br/>Session Access Token](#get-an-admin-api-session-access-token).
        /// </remarks>
        /// <param name="provider">The authentication provider to use.</param>
        /// <returns>Authentication was successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> AdminLoginAsync(Body body, ProviderType provider, System.Threading.CancellationToken cancellationToken)
        {
            if (provider == null)
                throw new System.ArgumentNullException("provider");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/auth/providers/{provider}/login");
            urlBuilder_.Replace("{provider}", System.Uri.EscapeDataString(ConvertToString(provider, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get information about the currently logged in user
        /// </summary>
        /// <returns>The profile was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AdminUser> GetAdminProfileAsync()
        {
            return GetAdminProfileAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get information about the currently logged in user
        /// </summary>
        /// <returns>The profile was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdminUser> GetAdminProfileAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/auth/profile");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdminUser>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Obtain a session access token
        /// </summary>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response2> AdminCreateSessionAsync()
        {
            return AdminCreateSessionAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Obtain a session access token
        /// </summary>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response2> AdminCreateSessionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/auth/session");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response3>("Invalid token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a session access token
        /// </summary>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteSessionAsync()
        {
            return AdminDeleteSessionAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a session access token
        /// </summary>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteSessionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/auth/session");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response4>("Invalid token or session", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all available Atlas App cloud regions
        /// </summary>
        /// <remarks>
        /// Return a list of all supported cloud regions in which you can
        /// <br/>deploy an Atlas App.
        /// </remarks>
        /// <returns>A list of all available Atlas App cloud region names.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CloudProviderRegion>> AdminListAppRegionsAsync()
        {
            return AdminListAppRegionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all available Atlas App cloud regions
        /// </summary>
        /// <remarks>
        /// Return a list of all supported cloud regions in which you can
        /// <br/>deploy an Atlas App.
        /// </remarks>
        /// <returns>A list of all available Atlas App cloud region names.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CloudProviderRegion>> AdminListAppRegionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/provider_regions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CloudProviderRegion>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all App Services Apps in an Atlas project/group
        /// </summary>
        /// <remarks>
        /// List all App Services Apps within an Atlas
        /// <br/>[project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
        /// </remarks>
        /// <param name="product">One or more specific App Services product types. If specified,
        /// <br/>this endpoint only returns Apps of the specified product type(s).
        /// <br/>
        /// <br/>Most apps use the `standard` product type, which this
        /// <br/>endpoint returns by default. The `atlas` and `data-api`
        /// <br/>product types represent special apps for
        /// <br/>[Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and
        /// <br/>[Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/)
        /// <br/>that you can access through the Atlas UI.
        /// <br/>
        /// <br/>You can specify multiple product types as a comma-separated list:
        /// <br/>
        /// <br/>```
        /// <br/>/groups/{groupId}/apps?product=atlas,data-api
        /// <br/>```</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AppInstance>> AdminListApplicationsAsync(Product? product, string groupId)
        {
            return AdminListApplicationsAsync(product, groupId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all App Services Apps in an Atlas project/group
        /// </summary>
        /// <remarks>
        /// List all App Services Apps within an Atlas
        /// <br/>[project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
        /// </remarks>
        /// <param name="product">One or more specific App Services product types. If specified,
        /// <br/>this endpoint only returns Apps of the specified product type(s).
        /// <br/>
        /// <br/>Most apps use the `standard` product type, which this
        /// <br/>endpoint returns by default. The `atlas` and `data-api`
        /// <br/>product types represent special apps for
        /// <br/>[Atlas Triggers](https://docs.mongodb.com/atlas/triggers) and
        /// <br/>[Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/)
        /// <br/>that you can access through the Atlas UI.
        /// <br/>
        /// <br/>You can specify multiple product types as a comma-separated list:
        /// <br/>
        /// <br/>```
        /// <br/>/groups/{groupId}/apps?product=atlas,data-api
        /// <br/>```</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AppInstance>> AdminListApplicationsAsync(Product? product, string groupId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (product != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("product") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AppInstance>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new app
        /// </summary>
        /// <param name="defaults">Whether or not to create a default application.</param>
        /// <param name="product">The App's product type. Apps use the `standard` product type
        /// <br/>by default. For most apps, you do not need to specify a
        /// <br/>`product` at all, or should specify `standard`.
        /// <br/>
        /// <br/>The `atlas` and `data-api` product types represent special,
        /// <br/>apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers)
        /// <br/>and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you
        /// <br/>can access through the Atlas UI.</param>
        /// <param name="body">The application to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <returns>The application was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AppInstance> AdminCreateApplicationAsync(bool? defaults, Product2? product, AppConstructor body, string groupId)
        {
            return AdminCreateApplicationAsync(defaults, product, body, groupId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new app
        /// </summary>
        /// <param name="defaults">Whether or not to create a default application.</param>
        /// <param name="product">The App's product type. Apps use the `standard` product type
        /// <br/>by default. For most apps, you do not need to specify a
        /// <br/>`product` at all, or should specify `standard`.
        /// <br/>
        /// <br/>The `atlas` and `data-api` product types represent special,
        /// <br/>apps for [Atlas Triggers](https://docs.mongodb.com/atlas/triggers)
        /// <br/>and [Atlas Data API](https://docs.mongodb.com/atlas/api/data-api/) that you
        /// <br/>can access through the Atlas UI.</param>
        /// <param name="body">The application to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <returns>The application was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppInstance> AdminCreateApplicationAsync(bool? defaults, Product2? product, AppConstructor body, string groupId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (defaults != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("defaults") + "=").Append(System.Uri.EscapeDataString(ConvertToString(defaults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (product != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("product") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppInstance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("There is an error in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an app
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The application was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AppInstance> AdminGetApplicationAsync(string groupId, string appId)
        {
            return AdminGetApplicationAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an app
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The application was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppInstance> AdminGetApplicationAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppInstance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an app
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The application was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteApplicationAsync(string groupId, string appId)
        {
            return AdminDeleteApplicationAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an app
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The application was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteApplicationAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Export an app as a zip file
        /// </summary>
        /// <remarks>
        /// [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/)
        /// <br/>an application as a zip file.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="deployment">The `_id` of a specific deployment to export. If not specified, export the latest deployment.</param>
        /// <param name="source_control">If `true`, the exported directory is suitable for automatic
        /// <br/>deployment from GitHub or other source control.
        /// <br/>
        /// <br/>Cannot be used with the `template` query parameter.</param>
        /// <param name="template">If `true`, the exported directory does not include any
        /// <br/>identifiers or other data that would tie the app to a specific
        /// <br/>deployment instance.
        /// <br/>
        /// <br/>Cannot be used with the `source_control` query parameter.</param>
        /// <param name="version">The configuration file schema version to export. This value
        /// <br/>corresponds to `config_version` in `realm_config.json`.</param>
        /// <returns>The application was successfully exported.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminExportApplicationAsync(string groupId, string appId, string deployment, bool? source_control, bool? template, string version)
        {
            return AdminExportApplicationAsync(groupId, appId, deployment, source_control, template, version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export an app as a zip file
        /// </summary>
        /// <remarks>
        /// [Export](https://www.mongodb.com/docs/atlas/app-services/apps/export/)
        /// <br/>an application as a zip file.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="deployment">The `_id` of a specific deployment to export. If not specified, export the latest deployment.</param>
        /// <param name="source_control">If `true`, the exported directory is suitable for automatic
        /// <br/>deployment from GitHub or other source control.
        /// <br/>
        /// <br/>Cannot be used with the `template` query parameter.</param>
        /// <param name="template">If `true`, the exported directory does not include any
        /// <br/>identifiers or other data that would tie the app to a specific
        /// <br/>deployment instance.
        /// <br/>
        /// <br/>Cannot be used with the `source_control` query parameter.</param>
        /// <param name="version">The configuration file schema version to export. This value
        /// <br/>corresponds to `config_version` in `realm_config.json`.</param>
        /// <returns>The application was successfully exported.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminExportApplicationAsync(string groupId, string appId, string deployment, bool? source_control, bool? template, string version, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/export?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            if (deployment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deployment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deployment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (source_control != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("source_control") + "=").Append(System.Uri.EscapeDataString(ConvertToString(source_control, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(System.Uri.EscapeDataString(ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (version != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("version") + "=").Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Event Subscriptions
        /// </summary>
        /// <remarks>
        /// Get all event subscriptions.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="type">The type of event subscription to return.
        /// <br/>
        /// <br/>- `DATABASE`: Return Database Triggers
        /// <br/>- `AUTHENTICATION`: Return Authentication Triggers
        /// <br/>- `SCHEDULED`: Return Scheduled Triggers
        /// <br/>- `SYNCTRANSLATOR`: Return Device Sync translators</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventSubscription>> AdminListEventSubscriptionsAsync(string groupId, string appId, Type? type)
        {
            return AdminListEventSubscriptionsAsync(groupId, appId, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Event Subscriptions
        /// </summary>
        /// <remarks>
        /// Get all event subscriptions.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="type">The type of event subscription to return.
        /// <br/>
        /// <br/>- `DATABASE`: Return Database Triggers
        /// <br/>- `AUTHENTICATION`: Return Authentication Triggers
        /// <br/>- `SCHEDULED`: Return Scheduled Triggers
        /// <br/>- `SYNCTRANSLATOR`: Return Device Sync translators</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventSubscription>> AdminListEventSubscriptionsAsync(string groupId, string appId, Type? type, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/event_subscriptions?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EventSubscription>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an Event Subscription
        /// </summary>
        /// <remarks>
        /// Return information about an event subscription.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="eventSubscriptionId">The unique `_id` value of an event subscription.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EventSubscription> AdminGetEventSubscriptionAsync(string groupId, string appId, string eventSubscriptionId)
        {
            return AdminGetEventSubscriptionAsync(groupId, appId, eventSubscriptionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an Event Subscription
        /// </summary>
        /// <remarks>
        /// Return information about an event subscription.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="eventSubscriptionId">The unique `_id` value of an event subscription.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EventSubscription> AdminGetEventSubscriptionAsync(string groupId, string appId, string eventSubscriptionId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (eventSubscriptionId == null)
                throw new System.ArgumentNullException("eventSubscriptionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/event_subscriptions/{eventSubscriptionId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{eventSubscriptionId}", System.Uri.EscapeDataString(ConvertToString(eventSubscriptionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventSubscription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the Latest Event Subscription Execution
        /// </summary>
        /// <remarks>
        /// Return information about the most recent execution of an event subscription.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="eventSubscriptionId">The unique `_id` value of an event subscription.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response5> AdminGetLatestEventSubscriptionExecutionAsync(string groupId, string appId, string eventSubscriptionId)
        {
            return AdminGetLatestEventSubscriptionExecutionAsync(groupId, appId, eventSubscriptionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the Latest Event Subscription Execution
        /// </summary>
        /// <remarks>
        /// Return information about the most recent execution of an event subscription.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="eventSubscriptionId">The unique `_id` value of an event subscription.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response5> AdminGetLatestEventSubscriptionExecutionAsync(string groupId, string appId, string eventSubscriptionId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (eventSubscriptionId == null)
                throw new System.ArgumentNullException("eventSubscriptionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/event_subscriptions/{eventSubscriptionId}/execution");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{eventSubscriptionId}", System.Uri.EscapeDataString(ConvertToString(eventSubscriptionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all triggers
        /// </summary>
        /// <remarks>
        /// Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed triggers.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AnyTrigger>> AdminListTriggersAsync(string groupId, string appId)
        {
            return AdminListTriggersAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all triggers
        /// </summary>
        /// <remarks>
        /// Get a list of all [triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed triggers.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AnyTrigger>> AdminListTriggersAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/triggers");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AnyTrigger>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a trigger
        /// </summary>
        /// <remarks>
        /// Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
        /// </remarks>
        /// <param name="body">A configuration for a database, scheduled, or authentication trigger.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Trigger> AdminCreateTriggerAsync(Trigger body, string groupId, string appId)
        {
            return AdminCreateTriggerAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a trigger
        /// </summary>
        /// <remarks>
        /// Create a new [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
        /// </remarks>
        /// <param name="body">A configuration for a database, scheduled, or authentication trigger.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Trigger> AdminCreateTriggerAsync(Trigger body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/triggers");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Trigger>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a trigger
        /// </summary>
        /// <remarks>
        /// Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="triggerId">The unique `_id` value of a trigger.</param>
        /// <returns>Successfully retrieved trigger.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Trigger> AdminGetTriggerAsync(string groupId, string appId, string triggerId)
        {
            return AdminGetTriggerAsync(groupId, appId, triggerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a trigger
        /// </summary>
        /// <remarks>
        /// Get the configuration for an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="triggerId">The unique `_id` value of a trigger.</param>
        /// <returns>Successfully retrieved trigger.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Trigger> AdminGetTriggerAsync(string groupId, string appId, string triggerId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (triggerId == null)
                throw new System.ArgumentNullException("triggerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/triggers/{triggerId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{triggerId}", System.Uri.EscapeDataString(ConvertToString(triggerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Trigger>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a trigger
        /// </summary>
        /// <remarks>
        /// Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
        /// </remarks>
        /// <param name="body">The updated trigger configuration.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="triggerId">The unique `_id` value of a trigger.</param>
        /// <returns>Successfully updated the trigger.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateTriggerAsync(Trigger body, string groupId, string appId, string triggerId)
        {
            return AdminUpdateTriggerAsync(body, groupId, appId, triggerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a trigger
        /// </summary>
        /// <remarks>
        /// Modify an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) in your application.
        /// </remarks>
        /// <param name="body">The updated trigger configuration.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="triggerId">The unique `_id` value of a trigger.</param>
        /// <returns>Successfully updated the trigger.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateTriggerAsync(Trigger body, string groupId, string appId, string triggerId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (triggerId == null)
                throw new System.ArgumentNullException("triggerId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/triggers/{triggerId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{triggerId}", System.Uri.EscapeDataString(ConvertToString(triggerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Encountered an error while updating the trigger.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a trigger
        /// </summary>
        /// <remarks>
        /// Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="triggerId">The unique `_id` value of a trigger.</param>
        /// <returns>Successfully deleted the trigger.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminDeleteTriggerAsync(string groupId, string appId, string triggerId)
        {
            return AdminDeleteTriggerAsync(groupId, appId, triggerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a trigger
        /// </summary>
        /// <remarks>
        /// Remove an existing [trigger](https://www.mongodb.com/docs/atlas/app-services/triggers/overview/) from your application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="triggerId">The unique `_id` value of a trigger.</param>
        /// <returns>Successfully deleted the trigger.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminDeleteTriggerAsync(string groupId, string appId, string triggerId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (triggerId == null)
                throw new System.ArgumentNullException("triggerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/triggers/{triggerId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{triggerId}", System.Uri.EscapeDataString(ConvertToString(triggerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Resume a suspended trigger
        /// </summary>
        /// <remarks>
        /// Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
        /// </remarks>
        /// <param name="body">Configuration options for the resume operation.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="triggerId">The unique `_id` value of a trigger.</param>
        /// <returns>Successfully resumed the trigger.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminResumeTriggerAsync(Body2 body, string groupId, string appId, string triggerId)
        {
            return AdminResumeTriggerAsync(body, groupId, appId, triggerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resume a suspended trigger
        /// </summary>
        /// <remarks>
        /// Resume a [suspended](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#suspended-triggers) database trigger.
        /// </remarks>
        /// <param name="body">Configuration options for the resume operation.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="triggerId">The unique `_id` value of a trigger.</param>
        /// <returns>Successfully resumed the trigger.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminResumeTriggerAsync(Body2 body, string groupId, string appId, string triggerId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (triggerId == null)
                throw new System.ArgumentNullException("triggerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/triggers/{triggerId}/resume");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{triggerId}", System.Uri.EscapeDataString(ConvertToString(triggerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response6>("Trigger not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all values defined in an application.
        /// </summary>
        /// <remarks>
        /// List all [values](https://www.mongodb.com/docs/realm/values-and-secrets)
        /// <br/>defined in an application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>[values](https://www.mongodb.com/docs/realm/values-and-secrets) were
        /// <br/>successfully enumerated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminListValuesAsync(string groupId, string appId)
        {
            return AdminListValuesAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all values defined in an application.
        /// </summary>
        /// <remarks>
        /// List all [values](https://www.mongodb.com/docs/realm/values-and-secrets)
        /// <br/>defined in an application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>[values](https://www.mongodb.com/docs/realm/values-and-secrets) were
        /// <br/>successfully enumerated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminListValuesAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/values");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Define a Value in an application
        /// </summary>
        /// <remarks>
        /// Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in
        /// <br/>an application.
        /// </remarks>
        /// <param name="body">The value to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The [value](https://www.mongodb.com/docs/realm/values-and-secrets) was
        /// <br/>successfully defined.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NewValue> AdminCreateValueAsync(NewValue body, string groupId, string appId)
        {
            return AdminCreateValueAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Define a Value in an application
        /// </summary>
        /// <remarks>
        /// Define a [Value](https://www.mongodb.com/docs/realm/values-and-secrets) in
        /// <br/>an application.
        /// </remarks>
        /// <param name="body">The value to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The [value](https://www.mongodb.com/docs/realm/values-and-secrets) was
        /// <br/>successfully defined.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NewValue> AdminCreateValueAsync(NewValue body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/values");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewValue>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a value definition from an application
        /// </summary>
        /// <remarks>
        /// Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets)
        /// <br/>definition from an application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="valueId">The unique `_id` value of a value.</param>
        /// <returns>Successfully retrieved the value.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Value> AdminGetValueAsync(string groupId, string appId, string valueId)
        {
            return AdminGetValueAsync(groupId, appId, valueId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a value definition from an application
        /// </summary>
        /// <remarks>
        /// Retrieve a [value](https://www.mongodb.com/docs/realm/values-and-secrets)
        /// <br/>definition from an application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="valueId">The unique `_id` value of a value.</param>
        /// <returns>Successfully retrieved the value.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Value> AdminGetValueAsync(string groupId, string appId, string valueId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (valueId == null)
                throw new System.ArgumentNullException("valueId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/values/{valueId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{valueId}", System.Uri.EscapeDataString(ConvertToString(valueId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Value>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a value defined in an application.
        /// </summary>
        /// <remarks>
        /// Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets)
        /// <br/>defined in an application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="valueId">The unique `_id` value of a value.</param>
        /// <returns>Successfully deleted the value.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteValueAsync(string groupId, string appId, string valueId)
        {
            return AdminDeleteValueAsync(groupId, appId, valueId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a value defined in an application.
        /// </summary>
        /// <remarks>
        /// Delete a [value](https://www.mongodb.com/docs/realm/values-and-secrets)
        /// <br/>defined in an application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="valueId">The unique `_id` value of a value.</param>
        /// <returns>Successfully deleted the value.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteValueAsync(string groupId, string appId, string valueId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (valueId == null)
                throw new System.ArgumentNullException("valueId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/values/{valueId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{valueId}", System.Uri.EscapeDataString(ConvertToString(valueId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a value definition in an application
        /// </summary>
        /// <remarks>
        /// Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets)
        /// <br/>definition in an application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="valueId">The unique `_id` value of a value.</param>
        /// <returns>Successfully updated the value.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminUpdateValueAsync(string groupId, string appId, string valueId)
        {
            return AdminUpdateValueAsync(groupId, appId, valueId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a value definition in an application
        /// </summary>
        /// <remarks>
        /// Update a [value](https://www.mongodb.com/docs/realm/values-and-secrets)
        /// <br/>definition in an application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="valueId">The unique `_id` value of a value.</param>
        /// <returns>Successfully updated the value.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminUpdateValueAsync(string groupId, string appId, string valueId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (valueId == null)
                throw new System.ArgumentNullException("valueId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/values/{valueId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{valueId}", System.Uri.EscapeDataString(ConvertToString(valueId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all data sources and third-party services
        /// </summary>
        /// <remarks>
        /// List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party
        /// <br/>services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed services.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminListServicesAsync(string groupId, string appId)
        {
            return AdminListServicesAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all data sources and third-party services
        /// </summary>
        /// <remarks>
        /// List all [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/) and [third-party
        /// <br/>services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed services.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminListServicesAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a data source or third-party service
        /// </summary>
        /// <remarks>
        /// Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party
        /// <br/>service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AtlasCluster> AdminCreateServiceAsync(AtlasCluster body, string groupId, string appId)
        {
            return AdminCreateServiceAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a data source or third-party service
        /// </summary>
        /// <remarks>
        /// Create a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party
        /// <br/>service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AtlasCluster> AdminCreateServiceAsync(AtlasCluster body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AtlasCluster>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("There is already a service with the given `name`.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get configuration of sources and third-party services
        /// </summary>
        /// <remarks>
        /// Get configuration of [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/)  and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully returned service configuration.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminGetServiceConfigAsync(string groupId, string appId)
        {
            return AdminGetServiceConfigAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get configuration of sources and third-party services
        /// </summary>
        /// <remarks>
        /// Get configuration of [data sources](https://www.mongodb.com/docs/atlas/app-services/mongodb/)  and [third-party services [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully returned service configuration.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminGetServiceConfigAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update configuration settings of sources and third-party services
        /// </summary>
        /// <remarks>
        /// Update the [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/)  configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateServiceConfigAsync(CreateDataSource body, string groupId, string appId)
        {
            return AdminUpdateServiceConfigAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update configuration settings of sources and third-party services
        /// </summary>
        /// <remarks>
        /// Update the [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/)  configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateServiceConfigAsync(CreateDataSource body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a data source or third-party service
        /// </summary>
        /// <remarks>
        /// Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AtlasCluster> AdminGetServiceAsync(string groupId, string appId, string serviceId)
        {
            return AdminGetServiceAsync(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a data source or third-party service
        /// </summary>
        /// <remarks>
        /// Get a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/) or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AtlasCluster> AdminGetServiceAsync(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AtlasCluster>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a data source or third-party service
        /// </summary>
        /// <remarks>
        /// Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/)
        /// <br/>or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteServiceAsync(string groupId, string appId, string serviceId)
        {
            return AdminDeleteServiceAsync(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a data source or third-party service
        /// </summary>
        /// <remarks>
        /// Delete a [data source](https://www.mongodb.com/docs/atlas/app-services/mongodb/)
        /// <br/>or [third-party service [Deprecated]](https://www.mongodb.com/docs/atlas/app-services/reference/services/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteServiceAsync(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateServiceAsync(string groupId, string appId, string serviceId)
        {
            return AdminUpdateServiceAsync(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// Update a [service](https://www.mongodb.com/docs/realm/services#std-label-services).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateServiceAsync(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sample &amp; Validate Documents
        /// </summary>
        /// <remarks>
        /// Query a subset of documents in a collection and validate each match against a schema.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="datasourceId">The unique `_id` value of a MongoDB data source.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response7> AdminValidateDocumentsAsync(Body3 body, string groupId, string appId, string datasourceId)
        {
            return AdminValidateDocumentsAsync(body, groupId, appId, datasourceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sample &amp; Validate Documents
        /// </summary>
        /// <remarks>
        /// Query a subset of documents in a collection and validate each match against a schema.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="datasourceId">The unique `_id` value of a MongoDB data source.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response7> AdminValidateDocumentsAsync(Body3 body, string groupId, string appId, string datasourceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (datasourceId == null)
                throw new System.ArgumentNullException("datasourceId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{datasourceId}/commands/validate_documents");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{datasourceId}", System.Uri.EscapeDataString(ConvertToString(datasourceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Run a command associated with a service
        /// </summary>
        /// <remarks>
        /// Run a command associated with a
        /// <br/>[service](https://www.mongodb.com/docs/realm/services#std-label-services).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="commandName">Command name</param>
        /// <returns>Successfully executed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminRunCommandAsync(string groupId, string appId, string serviceId, string commandName)
        {
            return AdminRunCommandAsync(groupId, appId, serviceId, commandName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Run a command associated with a service
        /// </summary>
        /// <remarks>
        /// Run a command associated with a
        /// <br/>[service](https://www.mongodb.com/docs/realm/services#std-label-services).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="commandName">Command name</param>
        /// <returns>Successfully executed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminRunCommandAsync(string groupId, string appId, string serviceId, string commandName, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (commandName == null)
                throw new System.ArgumentNullException("commandName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/{commandName}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{commandName}", System.Uri.EscapeDataString(ConvertToString(commandName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get information about the underlying Atlas mongod
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>The build information was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BuildInfo> GetBuildInfoAsync(string groupId, string appId, string serviceId)
        {
            return GetBuildInfoAsync(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get information about the underlying Atlas mongod
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>The build information was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BuildInfo> GetBuildInfoAsync(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/build_info");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BuildInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a service's configuration
        /// </summary>
        /// <remarks>
        /// Retrieve a [service's](https://www.mongodb.com/docs/realm/services#std-label-services)
        /// <br/>configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminGetServiceConfig2Async(string groupId, string appId, string serviceId)
        {
            return AdminGetServiceConfig2Async(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a service's configuration
        /// </summary>
        /// <remarks>
        /// Retrieve a [service's](https://www.mongodb.com/docs/realm/services#std-label-services)
        /// <br/>configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminGetServiceConfig2Async(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a service's configuration
        /// </summary>
        /// <remarks>
        /// Update a [service's](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateServiceConfig2Async(string groupId, string appId, string serviceId)
        {
            return AdminUpdateServiceConfig2Async(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a service's configuration
        /// </summary>
        /// <remarks>
        /// Update a [service's](https://www.mongodb.com/docs/realm/services#std-label-services) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateServiceConfig2Async(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all rules
        /// </summary>
        /// <remarks>
        /// List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminListRulesAsync(string groupId, string appId, string serviceId)
        {
            return AdminListRulesAsync(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all rules
        /// </summary>
        /// <remarks>
        /// List all [data access rules](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminListRulesAsync(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/rules");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a rule
        /// </summary>
        /// <remarks>
        /// Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="body">The rule to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response8> AdminCreateRuleAsync(Rule body, string groupId, string appId, string serviceId)
        {
            return AdminCreateRuleAsync(body, groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a rule
        /// </summary>
        /// <remarks>
        /// Create a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="body">The rule to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response8> AdminCreateRuleAsync(Rule body, string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/rules");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("There is already a rule with the given `name`.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a rule
        /// </summary>
        /// <remarks>
        /// Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="ruleId">The unique `_id` value of a rule.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Rule> AdminGetRuleAsync(string groupId, string appId, string serviceId, string ruleId)
        {
            return AdminGetRuleAsync(groupId, appId, serviceId, ruleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a rule
        /// </summary>
        /// <remarks>
        /// Get a specific [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="ruleId">The unique `_id` value of a rule.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Rule> AdminGetRuleAsync(string groupId, string appId, string serviceId, string ruleId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (ruleId == null)
                throw new System.ArgumentNullException("ruleId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/rules/{ruleId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ruleId}", System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Rule>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a rule
        /// </summary>
        /// <remarks>
        /// Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="ruleId">The unique `_id` value of a rule.</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteRuleAsync(string groupId, string appId, string serviceId, string ruleId)
        {
            return AdminDeleteRuleAsync(groupId, appId, serviceId, ruleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a rule
        /// </summary>
        /// <remarks>
        /// Delete a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="ruleId">The unique `_id` value of a rule.</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteRuleAsync(string groupId, string appId, string serviceId, string ruleId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (ruleId == null)
                throw new System.ArgumentNullException("ruleId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/rules/{ruleId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ruleId}", System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a rule
        /// </summary>
        /// <remarks>
        /// Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="body">The new state of the rule.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="ruleId">The unique `_id` value of a rule.</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateRuleAsync(Rule body, string groupId, string appId, string serviceId, string ruleId)
        {
            return AdminUpdateRuleAsync(body, groupId, appId, serviceId, ruleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a rule
        /// </summary>
        /// <remarks>
        /// Update a [data access rule](https://www.mongodb.com/docs/atlas/app-services/rules).
        /// </remarks>
        /// <param name="body">The new state of the rule.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="ruleId">The unique `_id` value of a rule.</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateRuleAsync(Rule body, string groupId, string appId, string serviceId, string ruleId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (ruleId == null)
                throw new System.ArgumentNullException("ruleId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/rules/{ruleId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ruleId}", System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get default roles and filters
        /// </summary>
        /// <remarks>
        /// Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DefaultRule> AdminGetDefaultRuleAsync(string groupId, string appId, string serviceId)
        {
            return AdminGetDefaultRuleAsync(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get default roles and filters
        /// </summary>
        /// <remarks>
        /// Get the current [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DefaultRule> AdminGetDefaultRuleAsync(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/default_rule");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DefaultRule>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response9>("No default rule is defined.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create default roles and filters
        /// </summary>
        /// <remarks>
        /// Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
        /// </remarks>
        /// <param name="body">A default rule configuration object.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Created default rule.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DefaultRule> AdminCreateDefaultRuleAsync(DefaultRule body, string groupId, string appId, string serviceId)
        {
            return AdminCreateDefaultRuleAsync(body, groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create default roles and filters
        /// </summary>
        /// <remarks>
        /// Create [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) for a data source.
        /// </remarks>
        /// <param name="body">A default rule configuration object.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Created default rule.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DefaultRule> AdminCreateDefaultRuleAsync(DefaultRule body, string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/default_rule");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DefaultRule>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response10>("Default rule already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update default roles and filters
        /// </summary>
        /// <remarks>
        /// Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
        /// </remarks>
        /// <param name="body">The updated default rule configuration object.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully modified the default rule.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateDefaultRuleAsync(Body4 body, string groupId, string appId, string serviceId)
        {
            return AdminUpdateDefaultRuleAsync(body, groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update default roles and filters
        /// </summary>
        /// <remarks>
        /// Modify the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
        /// </remarks>
        /// <param name="body">The updated default rule configuration object.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully modified the default rule.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateDefaultRuleAsync(Body4 body, string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/default_rule");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response11>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete default roles and filters
        /// </summary>
        /// <remarks>
        /// Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Deleted the default rule.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteDefaultRuleAsync(string groupId, string appId, string serviceId)
        {
            return AdminDeleteDefaultRuleAsync(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete default roles and filters
        /// </summary>
        /// <remarks>
        /// Delete the [default roles and filters](https://www.mongodb.com/docs/atlas/app-services/rules/#default-rules) of a data source.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Deleted the default rule.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteDefaultRuleAsync(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/default_rule");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response12>("Default rule does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate a JSON schema from sample
        /// </summary>
        /// <remarks>
        /// Sample a subset of documents in a collection to generate a JSON schema.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully generated schema</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response13> AdminGenerateSchemaAsync(Body5 body, string groupId, string appId, string serviceId)
        {
            return AdminGenerateSchemaAsync(body, groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a JSON schema from sample
        /// </summary>
        /// <remarks>
        /// Sample a subset of documents in a collection to generate a JSON schema.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully generated schema</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response13> AdminGenerateSchemaAsync(Body5 body, string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/generate_schema");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully listed incoming webhooks.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IncomingWebhook> AdminListWebhooksAsync(string groupId, string appId, string serviceId)
        {
            return AdminListWebhooksAsync(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// List [webhooks](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully listed incoming webhooks.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IncomingWebhook> AdminListWebhooksAsync(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IncomingWebhook>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="body">The webhook to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminCreateWebhookAsync(IncomingWebhook body, string groupId, string appId, string serviceId)
        {
            return AdminCreateWebhookAsync(body, groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// Create a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="body">The webhook to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminCreateWebhookAsync(IncomingWebhook body, string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="incomingWebhookId">The unique `_id` value of an incoming webhook</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminGetWebhookAsync(string groupId, string appId, string serviceId, string incomingWebhookId)
        {
            return AdminGetWebhookAsync(groupId, appId, serviceId, incomingWebhookId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Retrieve a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="incomingWebhookId">The unique `_id` value of an incoming webhook</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminGetWebhookAsync(string groupId, string appId, string serviceId, string incomingWebhookId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (incomingWebhookId == null)
                throw new System.ArgumentNullException("incomingWebhookId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks/{incomingWebhookId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incomingWebhookId}", System.Uri.EscapeDataString(ConvertToString(incomingWebhookId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="incomingWebhookId">The unique `_id` value of an incoming webhook</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteWebhookAsync(string groupId, string appId, string serviceId, string incomingWebhookId)
        {
            return AdminDeleteWebhookAsync(groupId, appId, serviceId, incomingWebhookId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="incomingWebhookId">The unique `_id` value of an incoming webhook</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteWebhookAsync(string groupId, string appId, string serviceId, string incomingWebhookId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (incomingWebhookId == null)
                throw new System.ArgumentNullException("incomingWebhookId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks/{incomingWebhookId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incomingWebhookId}", System.Uri.EscapeDataString(ConvertToString(incomingWebhookId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="body">The updated state of the webhook.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="incomingWebhookId">The unique `_id` value of an incoming webhook</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateWebhookAsync(IncomingWebhook body, string groupId, string appId, string serviceId, string incomingWebhookId)
        {
            return AdminUpdateWebhookAsync(body, groupId, appId, serviceId, incomingWebhookId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a [webhook](https://www.mongodb.com/docs/realm/services#std-label-service-webhooks).
        /// </remarks>
        /// <param name="body">The updated state of the webhook.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <param name="incomingWebhookId">The unique `_id` value of an incoming webhook</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateWebhookAsync(IncomingWebhook body, string groupId, string appId, string serviceId, string incomingWebhookId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (incomingWebhookId == null)
                throw new System.ArgumentNullException("incomingWebhookId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks/{incomingWebhookId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incomingWebhookId}", System.Uri.EscapeDataString(ConvertToString(incomingWebhookId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Flexible Sync information
        /// </summary>
        /// <remarks>
        /// Retrieve sync data for a specific Atlas App Services App when using 
        /// <br/>[Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SyncDataResponse> AdminGetFlexSyncAsync(string groupId, string appId, string serviceId)
        {
            return AdminGetFlexSyncAsync(groupId, appId, serviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Flexible Sync information
        /// </summary>
        /// <remarks>
        /// Retrieve sync data for a specific Atlas App Services App when using 
        /// <br/>[Flexible Sync](https://www.mongodb.com/docs/atlas/app-services/sync/get-started/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="serviceId">The unique `_id` value of a service.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SyncDataResponse> AdminGetFlexSyncAsync(string groupId, string appId, string serviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/service/{serviceId}/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SyncDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Partition-Based Sync information
        /// </summary>
        /// <remarks>
        /// Retrieve partition field data when using 
        /// <br/>[Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
        /// </remarks>
        /// <param name="service_id">The Service ID for the linked cluster.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PbsSyncResponse> AdminGetSyncAsync(string service_id, string groupId, string appId)
        {
            return AdminGetSyncAsync(service_id, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Partition-Based Sync information
        /// </summary>
        /// <remarks>
        /// Retrieve partition field data when using 
        /// <br/>[Partition-Based Sync](https://www.mongodb.com/docs/realm/reference/partition-based-sync/).
        /// </remarks>
        /// <param name="service_id">The Service ID for the linked cluster.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PbsSyncResponse> AdminGetSyncAsync(string service_id, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (service_id == null)
                throw new System.ArgumentNullException("service_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/sync/data?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("service_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(service_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PbsSyncResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List push notifications
        /// </summary>
        /// <remarks>
        /// List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
        /// </remarks>
        /// <param name="state">Only list notifications with the given state.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminListNotificationsAsync(MessageState? state, string groupId, string appId)
        {
            return AdminListNotificationsAsync(state, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List push notifications
        /// </summary>
        /// <remarks>
        /// List [push notifications](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
        /// </remarks>
        /// <param name="state">Only list notifications with the given state.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminListNotificationsAsync(MessageState? state, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/push/notifications?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a push notification
        /// </summary>
        /// <remarks>
        /// Create a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
        /// </remarks>
        /// <param name="body">The notification to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminCreateNotificationAsync(NewMessage body, string groupId, string appId)
        {
            return AdminCreateNotificationAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a push notification
        /// </summary>
        /// <remarks>
        /// Create a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
        /// </remarks>
        /// <param name="body">The notification to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminCreateNotificationAsync(NewMessage body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/push/notifications");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a push notification message
        /// </summary>
        /// <remarks>
        /// Retrieve a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)
        /// <br/>message.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> AdminGetMessageAsync(string groupId, string appId, string messageId)
        {
            return AdminGetMessageAsync(groupId, appId, messageId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a push notification message
        /// </summary>
        /// <remarks>
        /// Retrieve a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)
        /// <br/>message.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> AdminGetMessageAsync(string groupId, string appId, string messageId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/push/notifications/{messageId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messageId}", System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a push notification message
        /// </summary>
        /// <remarks>
        /// Delete a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)
        /// <br/>message.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteMessageAsync(string groupId, string appId, string messageId)
        {
            return AdminDeleteMessageAsync(groupId, appId, messageId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a push notification message
        /// </summary>
        /// <remarks>
        /// Delete a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)
        /// <br/>message.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteMessageAsync(string groupId, string appId, string messageId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/push/notifications/{messageId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messageId}", System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a push notification
        /// </summary>
        /// <remarks>
        /// Update a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)
        /// <br/>message.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Message> AdminUpdateMessageAsync(string groupId, string appId, string messageId)
        {
            return AdminUpdateMessageAsync(groupId, appId, messageId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a push notification
        /// </summary>
        /// <remarks>
        /// Update a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)
        /// <br/>message.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Message> AdminUpdateMessageAsync(string groupId, string appId, string messageId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/push/notifications/{messageId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messageId}", System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set a push notification's type
        /// </summary>
        /// <remarks>
        /// Set a [push
        /// <br/>notification's](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)
        /// <br/>type.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminSetMessageTypeAsync(string groupId, string appId, string messageId)
        {
            return AdminSetMessageTypeAsync(groupId, appId, messageId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set a push notification's type
        /// </summary>
        /// <remarks>
        /// Set a [push
        /// <br/>notification's](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications)
        /// <br/>type.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminSetMessageTypeAsync(string groupId, string appId, string messageId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/push/notifications/{messageId}/type");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messageId}", System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send a push notification
        /// </summary>
        /// <remarks>
        /// Send a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully sent.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminSendMessageAsync(string groupId, string appId, string messageId)
        {
            return AdminSendMessageAsync(groupId, appId, messageId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send a push notification
        /// </summary>
        /// <remarks>
        /// Send a [push
        /// <br/>notification](https://www.mongodb.com/docs/realm/push-notifications#std-label-push-notifications).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="messageId">Message ID</param>
        /// <returns>Successfully sent.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminSendMessageAsync(string groupId, string appId, string messageId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/push/notifications/{messageId}/send");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messageId}", System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="after">The `id` of the last user returned by a previous paginated request.</param>
        /// <param name="sort">The field name to sort results by. The only valid value is the
        /// <br/>default: `_id`.</param>
        /// <param name="desc">If `true`, returns sorted results in descending order. If not specified
        /// <br/>or set to `false`, results return in ascending order.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> AdminListUsersAsync(string after, string sort, bool? desc, string groupId, string appId)
        {
            return AdminListUsersAsync(after, sort, desc, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// List confirmed [user accounts](https://www.mongodb.com/docs/atlas/app-services/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="after">The `id` of the last user returned by a previous paginated request.</param>
        /// <param name="sort">The field name to sort results by. The only valid value is the
        /// <br/>default: `_id`.</param>
        /// <param name="desc">If `true`, returns sorted results in descending order. If not specified
        /// <br/>or set to `false`, results return in ascending order.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> AdminListUsersAsync(string after, string sort, bool? desc, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (desc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("desc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(desc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<User>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new
        /// <br/>[email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/)
        /// <br/>user account.
        /// <br/>
        /// <br/>*Note:* You cannot create user accounts through the Admin API
        /// <br/>for any authentication provider other than email/password.
        /// </remarks>
        /// <param name="body">The user to create</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<User> AdminCreateUserAsync(Body6 body, string groupId, string appId)
        {
            return AdminCreateUserAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new
        /// <br/>[email/password](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/)
        /// <br/>user account.
        /// <br/>
        /// <br/>*Note:* You cannot create user accounts through the Admin API
        /// <br/>for any authentication provider other than email/password.
        /// </remarks>
        /// <param name="body">The user to create</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<User> AdminCreateUserAsync(Body6 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Verify &amp; decode an access token
        /// </summary>
        /// <remarks>
        /// Verify a that a user's client access token is valid.
        /// </remarks>
        /// <param name="body">The user's client access token. The access token represents a logged in application user. This is not the same as the
        /// <br/>[``access_token``](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens)
        /// <br/>that you use to work with the Admin API.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Token is valid or expired.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> AdminVerifyUserAccessTokenAsync(Body7 body, string groupId, string appId)
        {
            return AdminVerifyUserAccessTokenAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Verify &amp; decode an access token
        /// </summary>
        /// <remarks>
        /// Verify a that a user's client access token is valid.
        /// </remarks>
        /// <param name="body">The user's client access token. The access token represents a logged in application user. This is not the same as the
        /// <br/>[``access_token``](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Get-Authentication-Tokens)
        /// <br/>that you use to work with the Admin API.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Token is valid or expired.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> AdminVerifyUserAccessTokenAsync(Body7 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users/verify_token");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response14>("Invalid Session", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a User
        /// </summary>
        /// <remarks>
        /// Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<User> AdminGetUserAsync(string groupId, string appId, string userId)
        {
            return AdminGetUserAsync(groupId, appId, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a User
        /// </summary>
        /// <remarks>
        /// Get a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<User> AdminGetUserAsync(string groupId, string appId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users/{userId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteUserAsync(string groupId, string appId, string userId)
        {
            return AdminDeleteUserAsync(groupId, appId, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a specific [user account](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts) by ID.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteUserAsync(string groupId, string appId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users/{userId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Change a user's email
        /// </summary>
        /// <remarks>
        /// Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
        /// </remarks>
        /// <param name="body">The new email address for the user.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminResetUserEmailAsync(Body8 body, string groupId, string appId, string userId)
        {
            return AdminResetUserEmailAsync(body, groupId, appId, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change a user's email
        /// </summary>
        /// <remarks>
        /// Change the email address for an [email/password user](https://www.mongodb.com/docs/atlas/app-services/authentication/email-password/) by ID.
        /// </remarks>
        /// <param name="body">The new email address for the user.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminResetUserEmailAsync(Body8 body, string groupId, string appId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users/{userId}/reset_email");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("- Payload is formatted incorrectly.\n- The email in the payload is not a string.\n- The email in payload has 0 or greater than 128 characters.\n- The user does not have a local-userpass identity.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The appId, groupId, or userId is invalid.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List a user's devices
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminListDevicesAsync(string groupId, string appId, string userId)
        {
            return AdminListDevicesAsync(groupId, appId, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List a user's devices
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminListDevicesAsync(string groupId, string appId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users/{userId}/devices");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revoke user sessions
        /// </summary>
        /// <remarks>
        /// Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)'s
        /// <br/>sessions.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Successfully revoked.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUserLogoutAsync(string groupId, string appId, string userId)
        {
            return AdminUserLogoutAsync(groupId, appId, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revoke user sessions
        /// </summary>
        /// <remarks>
        /// Revoke all of a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts)'s
        /// <br/>sessions.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Successfully revoked.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUserLogoutAsync(string groupId, string appId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users/{userId}/logout");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable a user
        /// </summary>
        /// <remarks>
        /// Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Successfully enabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminEnableUserAsync(string groupId, string appId, string userId)
        {
            return AdminEnableUserAsync(groupId, appId, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable a user
        /// </summary>
        /// <remarks>
        /// Enable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Successfully enabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminEnableUserAsync(string groupId, string appId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users/{userId}/enable");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disable a user
        /// </summary>
        /// <remarks>
        /// Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Successfully disabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDisableUserAsync(string groupId, string appId, string userId)
        {
            return AdminDisableUserAsync(groupId, appId, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable a user
        /// </summary>
        /// <remarks>
        /// Disable a [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="userId">User Account ID</param>
        /// <returns>Successfully disabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDisableUserAsync(string groupId, string appId, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/users/{userId}/disable");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List pending users
        /// </summary>
        /// <remarks>
        /// List pending user account registrations. Returns up to 50 pending users in a call.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="after">The unique ``_id`` for a pending user. ``List pending users`` can return 50
        /// <br/>pending users at a time. To view additional results, find the ``_id`` of the
        /// <br/>last pending user listed in the previous call to ``list pending users``. Call
        /// <br/>``list pending users`` again, passing the ``_id`` to the after parameter.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> AdminListPendingUsersAsync(string groupId, string appId, string after)
        {
            return AdminListPendingUsersAsync(groupId, appId, after, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List pending users
        /// </summary>
        /// <remarks>
        /// List pending user account registrations. Returns up to 50 pending users in a call.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="after">The unique ``_id`` for a pending user. ``List pending users`` can return 50
        /// <br/>pending users at a time. To view additional results, find the ``_id`` of the
        /// <br/>last pending user listed in the previous call to ``list pending users``. Call
        /// <br/>``list pending users`` again, passing the ``_id`` to the after parameter.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> AdminListPendingUsersAsync(string groupId, string appId, string after, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/user_registrations/pending_users?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a pending email/password authentication user
        /// </summary>
        /// <remarks>
        /// Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="email">Email address</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeletePendingEmailPasswordUserAsync(string groupId, string appId, string email)
        {
            return AdminDeletePendingEmailPasswordUserAsync(groupId, appId, email, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a pending email/password authentication user
        /// </summary>
        /// <remarks>
        /// Delete a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="email">Email address</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeletePendingEmailPasswordUserAsync(string groupId, string appId, string email, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (email == null)
                throw new System.ArgumentNullException("email");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{email}", System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send a confirmation email
        /// </summary>
        /// <remarks>
        /// Send a [confirmation
        /// <br/>email](https://www.mongodb.com/docs/realm/authentication/email-password/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="email">Email address</param>
        /// <returns>Successfully sent.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminSendConfirmationEmailAsync(string groupId, string appId, string email)
        {
            return AdminSendConfirmationEmailAsync(groupId, appId, email, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send a confirmation email
        /// </summary>
        /// <remarks>
        /// Send a [confirmation
        /// <br/>email](https://www.mongodb.com/docs/realm/authentication/email-password/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="email">Email address</param>
        /// <returns>Successfully sent.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminSendConfirmationEmailAsync(string groupId, string appId, string email, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (email == null)
                throw new System.ArgumentNullException("email");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/send_confirm");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{email}", System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Confirm a pending user
        /// </summary>
        /// <remarks>
        /// Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="email">Email address</param>
        /// <returns>Successfully confirmed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminConfirmPendingUserAsync(string groupId, string appId, string email)
        {
            return AdminConfirmPendingUserAsync(groupId, appId, email, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Confirm a pending user
        /// </summary>
        /// <remarks>
        /// Confirm a pending [user](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="email">Email address</param>
        /// <returns>Successfully confirmed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminConfirmPendingUserAsync(string groupId, string appId, string email, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (email == null)
                throw new System.ArgumentNullException("email");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/confirm");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{email}", System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Rerun a user confirmation workflow
        /// </summary>
        /// <remarks>
        /// Reruns a pending user's [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="email">Email address</param>
        /// <returns>Successfully re-ran confirmation workflow.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminRerunPendingUserConfirmationAsync(string groupId, string appId, string email)
        {
            return AdminRerunPendingUserConfirmationAsync(groupId, appId, email, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rerun a user confirmation workflow
        /// </summary>
        /// <remarks>
        /// Reruns a pending user's [confirmation workflow](https://www.mongodb.com/docs/realm/authentication#std-label-user-accounts).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="email">Email address</param>
        /// <returns>Successfully re-ran confirmation workflow.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminRerunPendingUserConfirmationAsync(string groupId, string appId, string email, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (email == null)
                throw new System.ArgumentNullException("email");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/run_confirm");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{email}", System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("User is already confirmed or Email/Password authentication is not\nenabled.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("User does not exist.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Execute a function
        /// </summary>
        /// <remarks>
        /// Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
        /// </remarks>
        /// <param name="user_id">The user as which to execute the function. Either `user_id` or
        /// <br/>`run_as_system` is required. You cannot specify both.</param>
        /// <param name="run_as_system">Determine whether or not to run as system user. Either `run_as_system`
        /// <br/>or `user_id` is required. You cannot specify both.</param>
        /// <param name="body">The function to execute.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully executed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response15> AdminExecuteFunctionAsync(string user_id, bool run_as_system, Body9 body, string groupId, string appId)
        {
            return AdminExecuteFunctionAsync(user_id, run_as_system, body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute a function
        /// </summary>
        /// <remarks>
        /// Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions) for testing.
        /// </remarks>
        /// <param name="user_id">The user as which to execute the function. Either `user_id` or
        /// <br/>`run_as_system` is required. You cannot specify both.</param>
        /// <param name="run_as_system">Determine whether or not to run as system user. Either `run_as_system`
        /// <br/>or `user_id` is required. You cannot specify both.</param>
        /// <param name="body">The function to execute.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully executed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response15> AdminExecuteFunctionAsync(string user_id, bool run_as_system, Body9 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (run_as_system == null)
                throw new System.ArgumentNullException("run_as_system");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/debug/execute_function?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("user_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("run_as_system") + "=").Append(System.Uri.EscapeDataString(ConvertToString(run_as_system, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Execute a function's source code for testing
        /// </summary>
        /// <remarks>
        /// Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)'s source code
        /// <br/>for testing.
        /// </remarks>
        /// <param name="user_id">The user as which to execute the function. Either `user_id` or
        /// <br/>`run_as_system` is required. You cannot specify both.</param>
        /// <param name="run_as_system">Determine whether or not to run as system user. Either `run_as_system`
        /// <br/>or `user_id` is required. You cannot specify both.</param>
        /// <param name="body">The source to execute.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully executed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response16> AdminExecuteFunctionSourceAsync(string user_id, bool run_as_system, Body10 body, string groupId, string appId)
        {
            return AdminExecuteFunctionSourceAsync(user_id, run_as_system, body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute a function's source code for testing
        /// </summary>
        /// <remarks>
        /// Execute a [function](https://www.mongodb.com/docs/realm/functions#std-label-functions)'s source code
        /// <br/>for testing.
        /// </remarks>
        /// <param name="user_id">The user as which to execute the function. Either `user_id` or
        /// <br/>`run_as_system` is required. You cannot specify both.</param>
        /// <param name="run_as_system">Determine whether or not to run as system user. Either `run_as_system`
        /// <br/>or `user_id` is required. You cannot specify both.</param>
        /// <param name="body">The source to execute.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully executed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response16> AdminExecuteFunctionSourceAsync(string user_id, bool run_as_system, Body10 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (run_as_system == null)
                throw new System.ArgumentNullException("run_as_system");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/debug/execute_function_source?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("user_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("run_as_system") + "=").Append(System.Uri.EscapeDataString(ConvertToString(run_as_system, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List authentication providers in a Atlas App Services App
        /// </summary>
        /// <remarks>
        /// List [authentication providers](https://www.mongodb.com/docs/realm/authentication/)
        /// <br/>within a Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminListAuthProvidersAsync(string groupId, string appId)
        {
            return AdminListAuthProvidersAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List authentication providers in a Atlas App Services App
        /// </summary>
        /// <remarks>
        /// List [authentication providers](https://www.mongodb.com/docs/realm/authentication/)
        /// <br/>within a Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminListAuthProvidersAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/auth_providers");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an authentication provider
        /// </summary>
        /// <remarks>
        /// Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AuthProvider> AdminCreateAuthProviderAsync(AuthProvider body, string groupId, string appId)
        {
            return AdminCreateAuthProviderAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an authentication provider
        /// </summary>
        /// <remarks>
        /// Create an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthProvider> AdminCreateAuthProviderAsync(AuthProvider body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/auth_providers");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthProvider>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve information about authentication provider
        /// </summary>
        /// <remarks>
        /// Retrieve information about one of an application's [authentication
        /// <br/>providers](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AuthProvider> AdminGetAuthProviderAsync(string groupId, string appId, string providerId)
        {
            return AdminGetAuthProviderAsync(groupId, appId, providerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve information about authentication provider
        /// </summary>
        /// <remarks>
        /// Retrieve information about one of an application's [authentication
        /// <br/>providers](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthProvider> AdminGetAuthProviderAsync(string groupId, string appId, string providerId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (providerId == null)
                throw new System.ArgumentNullException("providerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/auth_providers/{providerId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{providerId}", System.Uri.EscapeDataString(ConvertToString(providerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthProvider>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an authentication provider
        /// </summary>
        /// <remarks>
        /// Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteAuthProviderAsync(string groupId, string appId, string providerId)
        {
            return AdminDeleteAuthProviderAsync(groupId, appId, providerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an authentication provider
        /// </summary>
        /// <remarks>
        /// Delete an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteAuthProviderAsync(string groupId, string appId, string providerId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (providerId == null)
                throw new System.ArgumentNullException("providerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/auth_providers/{providerId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{providerId}", System.Uri.EscapeDataString(ConvertToString(providerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an authentication provider
        /// </summary>
        /// <remarks>
        /// Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateAuthProviderAsync(AuthProvider body, string groupId, string appId, string providerId)
        {
            return AdminUpdateAuthProviderAsync(body, groupId, appId, providerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an authentication provider
        /// </summary>
        /// <remarks>
        /// Update an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateAuthProviderAsync(AuthProvider body, string groupId, string appId, string providerId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (providerId == null)
                throw new System.ArgumentNullException("providerId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/auth_providers/{providerId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{providerId}", System.Uri.EscapeDataString(ConvertToString(providerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disable an authentication provider
        /// </summary>
        /// <remarks>
        /// Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully disabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDisableAuthProviderAsync(string groupId, string appId, string providerId)
        {
            return AdminDisableAuthProviderAsync(groupId, appId, providerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable an authentication provider
        /// </summary>
        /// <remarks>
        /// Disable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully disabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDisableAuthProviderAsync(string groupId, string appId, string providerId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (providerId == null)
                throw new System.ArgumentNullException("providerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/auth_providers/{providerId}/disable");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{providerId}", System.Uri.EscapeDataString(ConvertToString(providerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable an authentication provider
        /// </summary>
        /// <remarks>
        /// Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully enabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminEnableAuthProviderAsync(string groupId, string appId, string providerId)
        {
            return AdminEnableAuthProviderAsync(groupId, appId, providerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable an authentication provider
        /// </summary>
        /// <remarks>
        /// Enable an [authentication provider](https://www.mongodb.com/docs/realm/authentication/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="providerId">The unique `_id` value of an authentication provider</param>
        /// <returns>Successfully enabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminEnableAuthProviderAsync(string groupId, string appId, string providerId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (providerId == null)
                throw new System.ArgumentNullException("providerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/auth_providers/{providerId}/enable");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{providerId}", System.Uri.EscapeDataString(ConvertToString(providerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List allowed HTTP origins
        /// </summary>
        /// <remarks>
        /// List the allowed [HTTP
        /// <br/>origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)
        /// <br/>from which App Services should allow requests.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminListAllowedRequestOriginsAsync(string groupId, string appId)
        {
            return AdminListAllowedRequestOriginsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List allowed HTTP origins
        /// </summary>
        /// <remarks>
        /// List the allowed [HTTP
        /// <br/>origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)
        /// <br/>from which App Services should allow requests.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminListAllowedRequestOriginsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/allowed_request_origins");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set allowed HTTP origins
        /// </summary>
        /// <remarks>
        /// Set the allowed [HTTP
        /// <br/>origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)
        /// <br/>from which App Services should allow requests.
        /// </remarks>
        /// <param name="body">A list of HTTP origins.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The allowed HTTP origins were successfully set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminSetAllowedRequestOriginsAsync(object body, string groupId, string appId)
        {
            return AdminSetAllowedRequestOriginsAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set allowed HTTP origins
        /// </summary>
        /// <remarks>
        /// Set the allowed [HTTP
        /// <br/>origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)
        /// <br/>from which App Services should allow requests.
        /// </remarks>
        /// <param name="body">A list of HTTP origins.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The allowed HTTP origins were successfully set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminSetAllowedRequestOriginsAsync(object body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/allowed_request_origins");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List the allowed entries in the Access List
        /// </summary>
        /// <remarks>
        /// List the allowed entries in the Access List of your Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AllowedIPAccessListGetAsync(string groupId, string appId)
        {
            return AllowedIPAccessListGetAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List the allowed entries in the Access List
        /// </summary>
        /// <remarks>
        /// List the allowed entries in the Access List of your Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AllowedIPAccessListGetAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/access_list");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an IP address or CIDR block in the Access List
        /// </summary>
        /// <remarks>
        /// Create an IP address or CIDR block in the Access List for your App Services
        /// <br/>app.
        /// </remarks>
        /// <param name="body">The IP Access List entry to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response17> AllowedIPAccessListCreateAsync(Body11 body, string groupId, string appId)
        {
            return AllowedIPAccessListCreateAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an IP address or CIDR block in the Access List
        /// </summary>
        /// <remarks>
        /// Create an IP address or CIDR block in the Access List for your App Services
        /// <br/>app.
        /// </remarks>
        /// <param name="body">The IP Access List entry to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response17> AllowedIPAccessListCreateAsync(Body11 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/access_list");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify an IP address or CIDR block in the Access List
        /// </summary>
        /// <remarks>
        /// Modify an IP address or CIDR block in the Access List of your App Services
        /// <br/>app
        /// </remarks>
        /// <param name="body">The updated value of the IP Access List entry.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="ipId">The IP address entry denoted by `ip_id` with the information given in
        /// <br/>the request body</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response18> AllowedIPAccessListUpdateAsync(Body12 body, string groupId, string appId, string ipId)
        {
            return AllowedIPAccessListUpdateAsync(body, groupId, appId, ipId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an IP address or CIDR block in the Access List
        /// </summary>
        /// <remarks>
        /// Modify an IP address or CIDR block in the Access List of your App Services
        /// <br/>app
        /// </remarks>
        /// <param name="body">The updated value of the IP Access List entry.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="ipId">The IP address entry denoted by `ip_id` with the information given in
        /// <br/>the request body</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response18> AllowedIPAccessListUpdateAsync(Body12 body, string groupId, string appId, string ipId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (ipId == null)
                throw new System.ArgumentNullException("ipId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/access_list/{ipId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ipId}", System.Uri.EscapeDataString(ConvertToString(ipId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an IP address or CIDR block from the Access List
        /// </summary>
        /// <remarks>
        /// Delete an IP address or CIDR block from the Access List of your App Services
        /// <br/>app
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="ipId">The IP address entry denoted by `ip_id` with the information given in
        /// <br/>the request body</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AllowedIPAccessListDeleteAsync(string groupId, string appId, string ipId)
        {
            return AllowedIPAccessListDeleteAsync(groupId, appId, ipId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an IP address or CIDR block from the Access List
        /// </summary>
        /// <remarks>
        /// Delete an IP address or CIDR block from the Access List of your App Services
        /// <br/>app
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="ipId">The IP address entry denoted by `ip_id` with the information given in
        /// <br/>the request body</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AllowedIPAccessListDeleteAsync(string groupId, string appId, string ipId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (ipId == null)
                throw new System.ArgumentNullException("ipId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/access_list/{ipId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ipId}", System.Uri.EscapeDataString(ConvertToString(ipId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No IP addresses or CIDR blocks to delete", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List VPC Private Endpoints
        /// </summary>
        /// <remarks>
        /// Get a list of all private endpoints configured for the App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PrivateEndpoint>> AdminGetPrivateEndpointsAsync(string groupId, string appId)
        {
            return AdminGetPrivateEndpointsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List VPC Private Endpoints
        /// </summary>
        /// <remarks>
        /// Get a list of all private endpoints configured for the App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PrivateEndpoint>> AdminGetPrivateEndpointsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/private_endpoints");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PrivateEndpoint>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a VPC Private Endpoint
        /// </summary>
        /// <remarks>
        /// Configure a new private endpoint for the App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminCreatePrivateEndpointAsync(PrivateEndpoint body, string groupId, string appId)
        {
            return AdminCreatePrivateEndpointAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a VPC Private Endpoint
        /// </summary>
        /// <remarks>
        /// Configure a new private endpoint for the App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminCreatePrivateEndpointAsync(PrivateEndpoint body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/private_endpoints");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a VPC Private Endpoint
        /// </summary>
        /// <remarks>
        /// Get a specific private endpoint configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="privateEndpointId">The _id ObjectID of a VPC private endpoint.</param>
        /// <returns>Found</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PrivateEndpoint> AdminGetPrivateEndpointAsync(string groupId, string appId, string privateEndpointId)
        {
            return AdminGetPrivateEndpointAsync(groupId, appId, privateEndpointId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a VPC Private Endpoint
        /// </summary>
        /// <remarks>
        /// Get a specific private endpoint configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="privateEndpointId">The _id ObjectID of a VPC private endpoint.</param>
        /// <returns>Found</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PrivateEndpoint> AdminGetPrivateEndpointAsync(string groupId, string appId, string privateEndpointId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (privateEndpointId == null)
                throw new System.ArgumentNullException("privateEndpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/private_endpoints/{privateEndpointId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{privateEndpointId}", System.Uri.EscapeDataString(ConvertToString(privateEndpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PrivateEndpoint>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a VPC Private Endpoint
        /// </summary>
        /// <remarks>
        /// Update the configuration of a private endpoint.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="privateEndpointId">The _id ObjectID of a VPC private endpoint.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdatePrivateEndpointAsync(PrivateEndpoint body, string groupId, string appId, string privateEndpointId)
        {
            return AdminUpdatePrivateEndpointAsync(body, groupId, appId, privateEndpointId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a VPC Private Endpoint
        /// </summary>
        /// <remarks>
        /// Update the configuration of a private endpoint.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="privateEndpointId">The _id ObjectID of a VPC private endpoint.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdatePrivateEndpointAsync(PrivateEndpoint body, string groupId, string appId, string privateEndpointId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (privateEndpointId == null)
                throw new System.ArgumentNullException("privateEndpointId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/private_endpoints/{privateEndpointId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{privateEndpointId}", System.Uri.EscapeDataString(ConvertToString(privateEndpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a VPC Private Endpoint
        /// </summary>
        /// <remarks>
        /// Delete a private endpoint.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="privateEndpointId">The _id ObjectID of a VPC private endpoint.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeletePrivateEndpointAsync(string groupId, string appId, string privateEndpointId)
        {
            return AdminDeletePrivateEndpointAsync(groupId, appId, privateEndpointId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a VPC Private Endpoint
        /// </summary>
        /// <remarks>
        /// Delete a private endpoint.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="privateEndpointId">The _id ObjectID of a VPC private endpoint.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeletePrivateEndpointAsync(string groupId, string appId, string privateEndpointId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (privateEndpointId == null)
                throw new System.ArgumentNullException("privateEndpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/private_endpoints/{privateEndpointId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{privateEndpointId}", System.Uri.EscapeDataString(ConvertToString(privateEndpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List VPC Private Endpoint Services
        /// </summary>
        /// <remarks>
        /// Get a list of all private endpoint services configured for the App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PrivateEndpointServiceInfo>> AdminListPrivateEndpointServicesAsync(string groupId, string appId)
        {
            return AdminListPrivateEndpointServicesAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List VPC Private Endpoint Services
        /// </summary>
        /// <remarks>
        /// Get a list of all private endpoint services configured for the App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PrivateEndpointServiceInfo>> AdminListPrivateEndpointServicesAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/private_endpoint_service_infos");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PrivateEndpointServiceInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Toggle Non-VPC Requests
        /// </summary>
        /// <remarks>
        /// For Apps with Private Endpoints enabled, toggle whether or not the App processes requests that originate from outside of the VPC.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully enabled/disabled non-VPC access.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AllowNonVpcClientRequestsAsync(Body13 body, string groupId, string appId)
        {
            return AllowNonVpcClientRequestsAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Toggle Non-VPC Requests
        /// </summary>
        /// <remarks>
        /// For Apps with Private Endpoints enabled, toggle whether or not the App processes requests that originate from outside of the VPC.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully enabled/disabled non-VPC access.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AllowNonVpcClientRequestsAsync(Body13 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/allow_non_vpc_client_requests");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get User Refresh Token Expiration Time
        /// </summary>
        /// <remarks>
        /// Get the current expiration time in seconds for user session refresh tokens.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RefreshTokenExpiration> AdminGetRefreshTokenExpirationAsync(string groupId, string appId)
        {
            return AdminGetRefreshTokenExpirationAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get User Refresh Token Expiration Time
        /// </summary>
        /// <remarks>
        /// Get the current expiration time in seconds for user session refresh tokens.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RefreshTokenExpiration> AdminGetRefreshTokenExpirationAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/refresh_token_expiration");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RefreshTokenExpiration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Group or App Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set User Refresh Token Expiration Time
        /// </summary>
        /// <remarks>
        /// Set the expiration time in seconds for user session refresh tokens.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Expiration time updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminSetRefreshTokenExpirationAsync(RefreshTokenExpiration body, string groupId, string appId)
        {
            return AdminSetRefreshTokenExpirationAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set User Refresh Token Expiration Time
        /// </summary>
        /// <remarks>
        /// Set the expiration time in seconds for user session refresh tokens.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Expiration time updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminSetRefreshTokenExpirationAsync(RefreshTokenExpiration body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/security/refresh_token_expiration");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid expiration time", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Group or App Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve App Services metrics
        /// </summary>
        /// <remarks>
        /// Retrieves a variety of metrics, including: Compute Time, Data Transfer,
        /// <br/>Sync Minutes, Requests Succeeded, Requests Failed. For a complete list
        /// <br/>of available metrics, see [App
        /// <br/>Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="start">The ISO-8601 date and time of the start of the query period (e.g. "2022-10-27T14:01:01Z").</param>
        /// <param name="end">The ISO-8601 date and time of the end of the query period (e.g. "2022-12-27T14:01:01Z").</param>
        /// <param name="granularity">Specifies the granularity of the query period as an
        /// <br/>[ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples
        /// <br/>include "P31D" (31 day), "PT1H" (1 hour), and "PT5M" (5 minutes).</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response19> AdminGetMetricsAsync(string groupId, string appId, string start, string end, string granularity)
        {
            return AdminGetMetricsAsync(groupId, appId, start, end, granularity, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve App Services metrics
        /// </summary>
        /// <remarks>
        /// Retrieves a variety of metrics, including: Compute Time, Data Transfer,
        /// <br/>Sync Minutes, Requests Succeeded, Requests Failed. For a complete list
        /// <br/>of available metrics, see [App
        /// <br/>Services Metrics Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="start">The ISO-8601 date and time of the start of the query period (e.g. "2022-10-27T14:01:01Z").</param>
        /// <param name="end">The ISO-8601 date and time of the end of the query period (e.g. "2022-12-27T14:01:01Z").</param>
        /// <param name="granularity">Specifies the granularity of the query period as an
        /// <br/>[ISO-8601 duration value](https://en.wikipedia.org/wiki/ISO_8601#Durations). Examples
        /// <br/>include "P31D" (31 day), "PT1H" (1 hour), and "PT5M" (5 minutes).</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response19> AdminGetMetricsAsync(string groupId, string appId, string start, string end, string granularity, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (start == null)
                throw new System.ArgumentNullException("start");

            if (end == null)
                throw new System.ArgumentNullException("end");

            if (granularity == null)
                throw new System.ArgumentNullException("granularity");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/metrics?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("granularity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(granularity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve App Services logs
        /// </summary>
        /// <param name="co_id">Return only log messages associated with the given request Correlation ID.</param>
        /// <param name="errors_only">The value of this field does not matter. If included in the request,
        /// <br/>this endpoint only returns error logs (even if the value is set to `false`).
        /// <br/>If this field is excluded from the request, this endpoint only returns non-error logs.</param>
        /// <param name="user_id">Return only log messages associated with the given `user_id`.</param>
        /// <param name="start_date">The date and time in ISO 8601 at which to begin returning results,
        /// <br/>exclusive.</param>
        /// <param name="end_date">The date and time in ISO 8601 at which to cease returning results,
        /// <br/>inclusive.</param>
        /// <param name="skip">The offset number of matching log entries to skip before including them
        /// <br/>in the response.</param>
        /// <param name="limit">The maximum number of log entries to include in the response. If the
        /// <br/>query matches more than this many logs, it returns documents in
        /// <br/>ascending order by date until the limit is reached.</param>
        /// <param name="type">The kind of log you would like to retrieve.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response20> AdminGetLogsAsync(string co_id, bool? errors_only, string user_id, string start_date, string end_date, int? skip, int? limit, Type2? type, string groupId, string appId)
        {
            return AdminGetLogsAsync(co_id, errors_only, user_id, start_date, end_date, skip, limit, type, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve App Services logs
        /// </summary>
        /// <param name="co_id">Return only log messages associated with the given request Correlation ID.</param>
        /// <param name="errors_only">The value of this field does not matter. If included in the request,
        /// <br/>this endpoint only returns error logs (even if the value is set to `false`).
        /// <br/>If this field is excluded from the request, this endpoint only returns non-error logs.</param>
        /// <param name="user_id">Return only log messages associated with the given `user_id`.</param>
        /// <param name="start_date">The date and time in ISO 8601 at which to begin returning results,
        /// <br/>exclusive.</param>
        /// <param name="end_date">The date and time in ISO 8601 at which to cease returning results,
        /// <br/>inclusive.</param>
        /// <param name="skip">The offset number of matching log entries to skip before including them
        /// <br/>in the response.</param>
        /// <param name="limit">The maximum number of log entries to include in the response. If the
        /// <br/>query matches more than this many logs, it returns documents in
        /// <br/>ascending order by date until the limit is reached.</param>
        /// <param name="type">The kind of log you would like to retrieve.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response20> AdminGetLogsAsync(string co_id, bool? errors_only, string user_id, string start_date, string end_date, int? skip, int? limit, Type2? type, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/logs?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            if (co_id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("co_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(co_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (errors_only != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("errors_only") + "=").Append(System.Uri.EscapeDataString(ConvertToString(errors_only, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user_id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("user_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (end_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("end_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List log forwarders.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CreateLogForwarderRequest>> ListLogForwardersAsync(string groupId, string appId)
        {
            return ListLogForwardersAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List log forwarders.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CreateLogForwarderRequest>> ListLogForwardersAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/log_forwarders");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CreateLogForwarderRequest>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a log forwarder.
        /// </summary>
        /// <param name="body">A log forwarder configuration</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateLogForwarderRequest> CreateLogForwarderAsync(CreateLogForwarderRequest body, string groupId, string appId)
        {
            return CreateLogForwarderAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a log forwarder.
        /// </summary>
        /// <param name="body">A log forwarder configuration</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateLogForwarderRequest> CreateLogForwarderAsync(CreateLogForwarderRequest body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/log_forwarders");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateLogForwarderRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a specific log forwarder.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateLogForwarderRequest> GetLogForwarderAsync(string groupId, string appId, string forwarderId)
        {
            return GetLogForwarderAsync(groupId, appId, forwarderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific log forwarder.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateLogForwarderRequest> GetLogForwarderAsync(string groupId, string appId, string forwarderId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (forwarderId == null)
                throw new System.ArgumentNullException("forwarderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{forwarderId}", System.Uri.EscapeDataString(ConvertToString(forwarderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateLogForwarderRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a log forwarder.
        /// </summary>
        /// <param name="body">A log forwarder configuration</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateLogForwarderRequest> UpdateLogForwarderAsync(CreateLogForwarderRequest body, string groupId, string appId, string forwarderId)
        {
            return UpdateLogForwarderAsync(body, groupId, appId, forwarderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a log forwarder.
        /// </summary>
        /// <param name="body">A log forwarder configuration</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateLogForwarderRequest> UpdateLogForwarderAsync(CreateLogForwarderRequest body, string groupId, string appId, string forwarderId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (forwarderId == null)
                throw new System.ArgumentNullException("forwarderId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{forwarderId}", System.Uri.EscapeDataString(ConvertToString(forwarderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateLogForwarderRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a log forwarder.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteGwarderAsync(string groupId, string appId, string forwarderId)
        {
            return DeleteGwarderAsync(groupId, appId, forwarderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a log forwarder.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteGwarderAsync(string groupId, string appId, string forwarderId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (forwarderId == null)
                throw new System.ArgumentNullException("forwarderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{forwarderId}", System.Uri.EscapeDataString(ConvertToString(forwarderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable a log forwarder.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task EnableLogForwarderAsync(string groupId, string appId, string forwarderId)
        {
            return EnableLogForwarderAsync(groupId, appId, forwarderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable a log forwarder.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task EnableLogForwarderAsync(string groupId, string appId, string forwarderId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (forwarderId == null)
                throw new System.ArgumentNullException("forwarderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}/enable");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{forwarderId}", System.Uri.EscapeDataString(ConvertToString(forwarderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disable a log forwarder.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DisableLogForwarderAsync(string groupId, string appId, string forwarderId)
        {
            return DisableLogForwarderAsync(groupId, appId, forwarderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable a log forwarder.
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="forwarderId">The _id ObjectID of a log forwarder.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DisableLogForwarderAsync(string groupId, string appId, string forwarderId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (forwarderId == null)
                throw new System.ArgumentNullException("forwarderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/log_forwarders/{forwarderId}/disable");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{forwarderId}", System.Uri.EscapeDataString(ConvertToString(forwarderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List API keys
        /// </summary>
        /// <remarks>
        /// List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/)
        /// <br/>associated with a Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The API keys were successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminListApiKeysAsync(string groupId, string appId)
        {
            return AdminListApiKeysAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List API keys
        /// </summary>
        /// <remarks>
        /// List [API keys](https://www.mongodb.com/docs/realm/authentication/api-key/)
        /// <br/>associated with a Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The API keys were successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminListApiKeysAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/api_keys");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new API key
        /// </summary>
        /// <remarks>
        /// Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="body">The API key to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The API key was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiKey> AdminCreateApiKeyAsync(Body14 body, string groupId, string appId)
        {
            return AdminCreateApiKeyAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new API key
        /// </summary>
        /// <remarks>
        /// Create a new [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="body">The API key to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The API key was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiKey> AdminCreateApiKeyAsync(Body14 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/api_keys");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiKey>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve information about an API key
        /// </summary>
        /// <remarks>
        /// Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="apiKeyId">The unique `_id` value of an API key</param>
        /// <returns>The API key was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiKeyResponse> AdminGetApiKeyAsync(string groupId, string appId, string apiKeyId)
        {
            return AdminGetApiKeyAsync(groupId, appId, apiKeyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve information about an API key
        /// </summary>
        /// <remarks>
        /// Retrieve information about an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="apiKeyId">The unique `_id` value of an API key</param>
        /// <returns>The API key was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiKeyResponse> AdminGetApiKeyAsync(string groupId, string appId, string apiKeyId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (apiKeyId == null)
                throw new System.ArgumentNullException("apiKeyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{apiKeyId}", System.Uri.EscapeDataString(ConvertToString(apiKeyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiKeyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an API key
        /// </summary>
        /// <remarks>
        /// Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="apiKeyId">The unique `_id` value of an API key</param>
        /// <returns>The API key was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteApiKeyAsync(string groupId, string appId, string apiKeyId)
        {
            return AdminDeleteApiKeyAsync(groupId, appId, apiKeyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an API key
        /// </summary>
        /// <remarks>
        /// Delete an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="apiKeyId">The unique `_id` value of an API key</param>
        /// <returns>The API key was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteApiKeyAsync(string groupId, string appId, string apiKeyId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (apiKeyId == null)
                throw new System.ArgumentNullException("apiKeyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{apiKeyId}", System.Uri.EscapeDataString(ConvertToString(apiKeyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable an API key
        /// </summary>
        /// <remarks>
        /// Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="apiKeyId">The unique `_id` value of an API key</param>
        /// <returns>The API key was successfully enabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminEnableApiKeyAsync(string groupId, string appId, string apiKeyId)
        {
            return AdminEnableApiKeyAsync(groupId, appId, apiKeyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable an API key
        /// </summary>
        /// <remarks>
        /// Enable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="apiKeyId">The unique `_id` value of an API key</param>
        /// <returns>The API key was successfully enabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminEnableApiKeyAsync(string groupId, string appId, string apiKeyId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (apiKeyId == null)
                throw new System.ArgumentNullException("apiKeyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}/enable");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{apiKeyId}", System.Uri.EscapeDataString(ConvertToString(apiKeyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disable an API key
        /// </summary>
        /// <remarks>
        /// Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="apiKeyId">The unique `_id` value of an API key</param>
        /// <returns>The API key was successfully disabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDisableApiKeyAsync(string groupId, string appId, string apiKeyId)
        {
            return AdminDisableApiKeyAsync(groupId, appId, apiKeyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable an API key
        /// </summary>
        /// <remarks>
        /// Disable an [API key](https://www.mongodb.com/docs/realm/authentication/api-key/).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="apiKeyId">The unique `_id` value of an API key</param>
        /// <returns>The API key was successfully disabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDisableApiKeyAsync(string groupId, string appId, string apiKeyId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (apiKeyId == null)
                throw new System.ArgumentNullException("apiKeyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}/disable");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{apiKeyId}", System.Uri.EscapeDataString(ConvertToString(apiKeyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the Custom User Data Configuration
        /// </summary>
        /// <remarks>
        /// Get the [Custom User
        /// <br/>Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/)
        /// <br/>configuration for an Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomUserDataConfig> AdminGetCustomUserDataConfigAsync(string groupId, string appId)
        {
            return AdminGetCustomUserDataConfigAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the Custom User Data Configuration
        /// </summary>
        /// <remarks>
        /// Get the [Custom User
        /// <br/>Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/)
        /// <br/>configuration for an Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomUserDataConfig> AdminGetCustomUserDataConfigAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/custom_user_data");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomUserDataConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Configure Custom User Data
        /// </summary>
        /// <remarks>
        /// Modify the [Custom User
        /// <br/>Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/)
        /// <br/>configuration for an Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminSetCustomUserDataConfigAsync(CustomUserDataConfig body, string groupId, string appId)
        {
            return AdminSetCustomUserDataConfigAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Configure Custom User Data
        /// </summary>
        /// <remarks>
        /// Modify the [Custom User
        /// <br/>Data](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/)
        /// <br/>configuration for an Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminSetCustomUserDataConfigAsync(CustomUserDataConfig body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/custom_user_data");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List secrets
        /// </summary>
        /// <remarks>
        /// List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret)
        /// <br/>associated with a Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The Secrets were successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminGetAllSecretsAsync(string groupId, string appId)
        {
            return AdminGetAllSecretsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List secrets
        /// </summary>
        /// <remarks>
        /// List [secrets](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret)
        /// <br/>associated with a Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The Secrets were successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminGetAllSecretsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/secrets");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new Secret
        /// </summary>
        /// <remarks>
        /// Create a new
        /// <br/>[Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
        /// </remarks>
        /// <param name="body">The Secret to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The Secret was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response21> AdminCreateASecretAsync(Body15 body, string groupId, string appId)
        {
            return AdminCreateASecretAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Secret
        /// </summary>
        /// <remarks>
        /// Create a new
        /// <br/>[Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets).
        /// </remarks>
        /// <param name="body">The Secret to create.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The Secret was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response21> AdminCreateASecretAsync(Body15 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/secrets");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a Secret
        /// </summary>
        /// <remarks>
        /// Modify a
        /// <br/>[Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets)
        /// <br/>associated with a Atlas App Services App.
        /// </remarks>
        /// <param name="body">The modified value of the Secret.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="secretId">The unique `_id` value of a secret.</param>
        /// <returns>No body returned for response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminModifyASecretAsync(Body16 body, string groupId, string appId, string secretId)
        {
            return AdminModifyASecretAsync(body, groupId, appId, secretId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a Secret
        /// </summary>
        /// <remarks>
        /// Modify a
        /// <br/>[Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets)
        /// <br/>associated with a Atlas App Services App.
        /// </remarks>
        /// <param name="body">The modified value of the Secret.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="secretId">The unique `_id` value of a secret.</param>
        /// <returns>No body returned for response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminModifyASecretAsync(Body16 body, string groupId, string appId, string secretId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (secretId == null)
                throw new System.ArgumentNullException("secretId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/secrets/{secretId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{secretId}", System.Uri.EscapeDataString(ConvertToString(secretId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a Secret
        /// </summary>
        /// <remarks>
        /// Delete a
        /// <br/>[Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets)
        /// <br/>associated with a Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="secretId">The unique `_id` value of a secret.</param>
        /// <returns>The Secret was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteSecretAsync(string groupId, string appId, string secretId)
        {
            return AdminDeleteSecretAsync(groupId, appId, secretId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Secret
        /// </summary>
        /// <remarks>
        /// Delete a
        /// <br/>[Secret](https://www.mongodb.com/docs/realm/values-and-secrets/define-and-manage-secrets)
        /// <br/>associated with a Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="secretId">The unique `_id` value of a secret.</param>
        /// <returns>The Secret was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteSecretAsync(string groupId, string appId, string secretId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (secretId == null)
                throw new System.ArgumentNullException("secretId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/secrets/{secretId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{secretId}", System.Uri.EscapeDataString(ConvertToString(secretId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Functions
        /// </summary>
        /// <remarks>
        /// List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminListFunctionsAsync(string groupId, string appId)
        {
            return AdminListFunctionsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Functions
        /// </summary>
        /// <remarks>
        /// List [Functions](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminListFunctionsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/functions");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new Function
        /// </summary>
        /// <remarks>
        /// Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="body">The function to create</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The function was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response22> AdminCreateFunctionAsync(NewFunction body, string groupId, string appId)
        {
            return AdminCreateFunctionAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Function
        /// </summary>
        /// <remarks>
        /// Create a new [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="body">The function to create</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The function was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response22> AdminCreateFunctionAsync(NewFunction body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/functions");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve a Function
        /// </summary>
        /// <remarks>
        /// Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="functionId">The unique `_id` value of a function.</param>
        /// <returns>The function was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Function> AdminGetFunctionAsync(string groupId, string appId, string functionId)
        {
            return AdminGetFunctionAsync(groupId, appId, functionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a Function
        /// </summary>
        /// <remarks>
        /// Retrieve a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="functionId">The unique `_id` value of a function.</param>
        /// <returns>The function was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Function> AdminGetFunctionAsync(string groupId, string appId, string functionId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (functionId == null)
                throw new System.ArgumentNullException("functionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/functions/{functionId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionId}", System.Uri.EscapeDataString(ConvertToString(functionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Function>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a Function
        /// </summary>
        /// <remarks>
        /// Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="functionId">The unique `_id` value of a function.</param>
        /// <returns>The function was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteFunctionAsync(string groupId, string appId, string functionId)
        {
            return AdminDeleteFunctionAsync(groupId, appId, functionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Function
        /// </summary>
        /// <remarks>
        /// Delete a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="functionId">The unique `_id` value of a function.</param>
        /// <returns>The function was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteFunctionAsync(string groupId, string appId, string functionId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (functionId == null)
                throw new System.ArgumentNullException("functionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/functions/{functionId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionId}", System.Uri.EscapeDataString(ConvertToString(functionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a Function
        /// </summary>
        /// <remarks>
        /// Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="functionId">The unique `_id` value of a function.</param>
        /// <returns>The function was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NewFunction> AdminUpdateFunctionAsync(string groupId, string appId, string functionId)
        {
            return AdminUpdateFunctionAsync(groupId, appId, functionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a Function
        /// </summary>
        /// <remarks>
        /// Update a [Function](https://www.mongodb.com/docs/realm/functions#std-label-functions).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="functionId">The unique `_id` value of a function.</param>
        /// <returns>The function was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NewFunction> AdminUpdateFunctionAsync(string groupId, string appId, string functionId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (functionId == null)
                throw new System.ArgumentNullException("functionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/functions/{functionId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionId}", System.Uri.EscapeDataString(ConvertToString(functionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NewFunction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List external dependencies
        /// </summary>
        /// <remarks>
        /// List [external
        /// <br/>dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded
        /// <br/>to the Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The function was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DependenciesSummary> AdminGetAllDependenciesAsync(string groupId, string appId)
        {
            return AdminGetAllDependenciesAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List external dependencies
        /// </summary>
        /// <remarks>
        /// List [external
        /// <br/>dependencies](https://www.mongodb.com/docs/realm/functions/dependencies/) uploaded
        /// <br/>to the Atlas App Services App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>The function was successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DependenciesSummary> AdminGetAllDependenciesAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/dependencies");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DependenciesSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the Deployment Configuration
        /// </summary>
        /// <remarks>
        /// See information about how your App deploys changes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeploymentConfig> AdminGetDeploymentConfigAsync(string groupId, string appId)
        {
            return AdminGetDeploymentConfigAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the Deployment Configuration
        /// </summary>
        /// <remarks>
        /// See information about how your App deploys changes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeploymentConfig> AdminGetDeploymentConfigAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/deploy/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeploymentConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Configure Deployment
        /// </summary>
        /// <remarks>
        /// Modify an App's deployment configuration to customize how the App deploys changes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminConfigureDeploymentAsync(DeploymentConfig body, string groupId, string appId)
        {
            return AdminConfigureDeploymentAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Configure Deployment
        /// </summary>
        /// <remarks>
        /// Modify an App's deployment configuration to customize how the App deploys changes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminConfigureDeploymentAsync(DeploymentConfig body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/deploy/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List recent deployments
        /// </summary>
        /// <remarks>
        /// Return the 25 most recent application deployments.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Deployment>> AdminListDeploymentsAsync(string groupId, string appId)
        {
            return AdminListDeploymentsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List recent deployments
        /// </summary>
        /// <remarks>
        /// Return the 25 most recent application deployments.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Deployment>> AdminListDeploymentsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/deployments");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Deployment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a deployment
        /// </summary>
        /// <remarks>
        /// Get information about a recent deployment of the application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="deploymentId">The `_id` value of an application deployment.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Deployment> AdminGetDeploymentAsync(string groupId, string appId, string deploymentId)
        {
            return AdminGetDeploymentAsync(groupId, appId, deploymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a deployment
        /// </summary>
        /// <remarks>
        /// Get information about a recent deployment of the application.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="deploymentId">The `_id` value of an application deployment.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Deployment> AdminGetDeploymentAsync(string groupId, string appId, string deploymentId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (deploymentId == null)
                throw new System.ArgumentNullException("deploymentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/deployments/{deploymentId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{deploymentId}", System.Uri.EscapeDataString(ConvertToString(deploymentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Deployment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Redeploy a Deployment
        /// </summary>
        /// <remarks>
        /// Redeploy a previously-deployed version of an App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="deploymentId">The `_id` value of an application deployment.</param>
        /// <returns>Successfully redeployed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminRedeployDeploymentAsync(string groupId, string appId, string deploymentId)
        {
            return AdminRedeployDeploymentAsync(groupId, appId, deploymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redeploy a Deployment
        /// </summary>
        /// <remarks>
        /// Redeploy a previously-deployed version of an App.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="deploymentId">The `_id` value of an application deployment.</param>
        /// <returns>Successfully redeployed</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminRedeployDeploymentAsync(string groupId, string appId, string deploymentId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (deploymentId == null)
                throw new System.ArgumentNullException("deploymentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/deployments/{deploymentId}/redeploy");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{deploymentId}", System.Uri.EscapeDataString(ConvertToString(deploymentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response23>("Deployment not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Current Deployment Draft
        /// </summary>
        /// <remarks>
        /// Return the current application deployment draft, if applicable.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeploymentDraft> AdminListDeploymentDraftsAsync(string groupId, string appId)
        {
            return AdminListDeploymentDraftsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Current Deployment Draft
        /// </summary>
        /// <remarks>
        /// Return the current application deployment draft, if applicable.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeploymentDraft> AdminListDeploymentDraftsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/drafts");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeploymentDraft>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a Deployment Draft
        /// </summary>
        /// <remarks>
        /// Create a new application deployment draft, if none exists.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created draft.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeploymentDraft> AdminCreateDeploymentDraftAsync(string groupId, string appId)
        {
            return AdminCreateDeploymentDraftAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a Deployment Draft
        /// </summary>
        /// <remarks>
        /// Create a new application deployment draft, if none exists.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully created draft.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeploymentDraft> AdminCreateDeploymentDraftAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/drafts");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeploymentDraft>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Draft already exists", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Discard the specified deployment draft
        /// </summary>
        /// <remarks>
        /// Discard the specified application deployment draft.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="draftId">The unique `_id` value of a draft.</param>
        /// <returns>The draft was successfully discarded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDiscardDraftAsync(string groupId, string appId, string draftId)
        {
            return AdminDiscardDraftAsync(groupId, appId, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Discard the specified deployment draft
        /// </summary>
        /// <remarks>
        /// Discard the specified application deployment draft.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="draftId">The unique `_id` value of a draft.</param>
        /// <returns>The draft was successfully discarded.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDiscardDraftAsync(string groupId, string appId, string draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/drafts/{draftId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{draftId}", System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deploy a deployment draft
        /// </summary>
        /// <remarks>
        /// Deploy the specified application deployment draft.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="draftId">The unique `_id` value of a draft.</param>
        /// <returns>The draft was successfully deployed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Deployment> AdminDeployDraftAsync(Body17 body, string groupId, string appId, string draftId)
        {
            return AdminDeployDraftAsync(body, groupId, appId, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deploy a deployment draft
        /// </summary>
        /// <remarks>
        /// Deploy the specified application deployment draft.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="draftId">The unique `_id` value of a draft.</param>
        /// <returns>The draft was successfully deployed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Deployment> AdminDeployDraftAsync(Body17 body, string groupId, string appId, string draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/drafts/{draftId}/deployment");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{draftId}", System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Deployment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Diff a draft with the current deployment
        /// </summary>
        /// <remarks>
        /// Return a diff between the currently deployed application and the
        /// <br/>specified draft.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="draftId">The unique `_id` value of a draft.</param>
        /// <returns>Successfully diffed draft.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Diff> AdminDeployDraftDiffAsync(string groupId, string appId, string draftId)
        {
            return AdminDeployDraftDiffAsync(groupId, appId, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Diff a draft with the current deployment
        /// </summary>
        /// <remarks>
        /// Return a diff between the currently deployed application and the
        /// <br/>specified draft.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="draftId">The unique `_id` value of a draft.</param>
        /// <returns>Successfully diffed draft.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Diff> AdminDeployDraftDiffAsync(string groupId, string appId, string draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/drafts/{draftId}/diff");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{draftId}", System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Diff>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set the App Environment
        /// </summary>
        /// <remarks>
        /// Set the App's active environment
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AppInstance> AdminSetEnvironmentAsync(Body18 body, string groupId, string appId)
        {
            return AdminSetEnvironmentAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set the App Environment
        /// </summary>
        /// <remarks>
        /// Set the App's active environment
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppInstance> AdminSetEnvironmentAsync(Body18 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/environment");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppInstance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Invalid environment", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List All Environment Values
        /// </summary>
        /// <remarks>
        /// Get basic information about all environment values in the App.
        /// <br/>Results do not include the environment-specific `values`. For
        /// <br/>details on a specific environment, call [Get an Environment
        /// <br/>Value](#tag/environments/operation/adminGetEnvironmentValue).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnvironmentValueDescription>> AdminListEnvironmentValuesAsync(string groupId, string appId)
        {
            return AdminListEnvironmentValuesAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List All Environment Values
        /// </summary>
        /// <remarks>
        /// Get basic information about all environment values in the App.
        /// <br/>Results do not include the environment-specific `values`. For
        /// <br/>details on a specific environment, call [Get an Environment
        /// <br/>Value](#tag/environments/operation/adminGetEnvironmentValue).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnvironmentValueDescription>> AdminListEnvironmentValuesAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/environment_values");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EnvironmentValueDescription>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("There is an error in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an Environment Value
        /// </summary>
        /// <remarks>
        /// Define a new environment value.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EnvironmentValueDescription> AdminCreateEnvironmentValueAsync(EnvironmentValue body, string groupId, string appId)
        {
            return AdminCreateEnvironmentValueAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an Environment Value
        /// </summary>
        /// <remarks>
        /// Define a new environment value.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentValueDescription> AdminCreateEnvironmentValueAsync(EnvironmentValue body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/environment_values");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentValueDescription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Environment value name already exists", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an Environment Value
        /// </summary>
        /// <remarks>
        /// Get details about a specific environment value
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="environmentValueId">The `_id` value of an environment value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EnvironmentValue> AdminGetEnvironmentValueAsync(string groupId, string appId, string environmentValueId)
        {
            return AdminGetEnvironmentValueAsync(groupId, appId, environmentValueId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an Environment Value
        /// </summary>
        /// <remarks>
        /// Get details about a specific environment value
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="environmentValueId">The `_id` value of an environment value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentValue> AdminGetEnvironmentValueAsync(string groupId, string appId, string environmentValueId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (environmentValueId == null)
                throw new System.ArgumentNullException("environmentValueId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/environment_values/{environmentValueId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{environmentValueId}", System.Uri.EscapeDataString(ConvertToString(environmentValueId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentValue>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response24>("Environment value not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify an Environment Value
        /// </summary>
        /// <remarks>
        /// Modify an existing environment value
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="environmentValueId">The `_id` value of an environment value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EnvironmentValueDescription> AdminModifyEnvironmentValueAsync(EnvironmentValue body, string groupId, string appId, string environmentValueId)
        {
            return AdminModifyEnvironmentValueAsync(body, groupId, appId, environmentValueId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an Environment Value
        /// </summary>
        /// <remarks>
        /// Modify an existing environment value
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="environmentValueId">The `_id` value of an environment value.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EnvironmentValueDescription> AdminModifyEnvironmentValueAsync(EnvironmentValue body, string groupId, string appId, string environmentValueId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (environmentValueId == null)
                throw new System.ArgumentNullException("environmentValueId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/environment_values/{environmentValueId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{environmentValueId}", System.Uri.EscapeDataString(ConvertToString(environmentValueId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnvironmentValueDescription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response24>("Environment value not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an Environment Value
        /// </summary>
        /// <remarks>
        /// Delete an existing environment value
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="environmentValueId">The `_id` value of an environment value.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteEnvironmentValueAsync(string groupId, string appId, string environmentValueId)
        {
            return AdminDeleteEnvironmentValueAsync(groupId, appId, environmentValueId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an Environment Value
        /// </summary>
        /// <remarks>
        /// Delete an existing environment value
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="environmentValueId">The `_id` value of an environment value.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteEnvironmentValueAsync(string groupId, string appId, string environmentValueId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (environmentValueId == null)
                throw new System.ArgumentNullException("environmentValueId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/environment_values/{environmentValueId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{environmentValueId}", System.Uri.EscapeDataString(ConvertToString(environmentValueId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response24>("Environment value not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Hosting Configuration
        /// </summary>
        /// <remarks>
        /// Returns the current hosting configuration. Hosting is active
        /// <br/>if the response includes `status: "setup_ok"`.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully get hosting configuration</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HostingConfiguration> AdminGetHostingConfigAsync(string groupId, string appId)
        {
            return AdminGetHostingConfigAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Hosting Configuration
        /// </summary>
        /// <remarks>
        /// Returns the current hosting configuration. Hosting is active
        /// <br/>if the response includes `status: "setup_ok"`.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully get hosting configuration</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HostingConfiguration> AdminGetHostingConfigAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/hosting/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostingConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable/Disable Hosting
        /// </summary>
        /// <remarks>
        /// Enable or disable App Services Hosting for your app.
        /// <br/>Changes to hosting can take up to 15 minutes to take effect.
        /// <br/>This endpoint does not notify you when the changes have taken effect,
        /// <br/>only that the change operation was successfully received by the server.
        /// <br/>
        /// <br/>You can see if the hosting enablement/disablement is complete
        /// <br/>by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully enabled/disabled App Services Hosting.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminEnableDisableHostingAsync(Body19 body, string groupId, string appId)
        {
            return AdminEnableDisableHostingAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable/Disable Hosting
        /// </summary>
        /// <remarks>
        /// Enable or disable App Services Hosting for your app.
        /// <br/>Changes to hosting can take up to 15 minutes to take effect.
        /// <br/>This endpoint does not notify you when the changes have taken effect,
        /// <br/>only that the change operation was successfully received by the server.
        /// <br/>
        /// <br/>You can see if the hosting enablement/disablement is complete
        /// <br/>by calling the [Get Hosting Configuration](#operation/adminGetHostingConfig) endpoint.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully enabled/disabled App Services Hosting.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminEnableDisableHostingAsync(Body19 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/hosting/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List all hosted assets
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed hosted files.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HostedAssetMetadata>> AdminGetAllHostedAssetsAsync(string groupId, string appId)
        {
            return AdminGetAllHostedAssetsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all hosted assets
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully listed hosted files.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HostedAssetMetadata>> AdminGetAllHostedAssetsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/hosting/assets");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HostedAssetMetadata>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Move or copy a hosted asset
        /// </summary>
        /// <remarks>
        /// Move or copy a hosted asset to a new resource path.
        /// </remarks>
        /// <param name="body">The hosted asset file and its metadata. (Must use
        /// <br/>`Content-Type: multipart/mixed`)</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully moved/copied the hosted asset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminMoveCopyHostedAssetAsync(Body20 body, string groupId, string appId)
        {
            return AdminMoveCopyHostedAssetAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move or copy a hosted asset
        /// </summary>
        /// <remarks>
        /// Move or copy a hosted asset to a new resource path.
        /// </remarks>
        /// <param name="body">The hosted asset file and its metadata. (Must use
        /// <br/>`Content-Type: multipart/mixed`)</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully moved/copied the hosted asset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminMoveCopyHostedAssetAsync(Body20 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/hosting/assets");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve metadata for a specific hosted asset
        /// </summary>
        /// <param name="path">The resource path of a hosted asset.</param>
        /// <param name="prefix">Return only those assets where the resource path begins with the
        /// <br/>specified prefix.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully retrieved metadata for the hosted file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HostedAssetMetadata> AdminGetHostedAssetAsync(string path, string prefix, string groupId, string appId)
        {
            return AdminGetHostedAssetAsync(path, prefix, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve metadata for a specific hosted asset
        /// </summary>
        /// <param name="path">The resource path of a hosted asset.</param>
        /// <param name="prefix">Return only those assets where the resource path begins with the
        /// <br/>specified prefix.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully retrieved metadata for the hosted file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HostedAssetMetadata> AdminGetHostedAssetAsync(string path, string prefix, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (path == null)
                throw new System.ArgumentNullException("path");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/hosting/assets/asset?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("path") + "=").Append(System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (prefix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("prefix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prefix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HostedAssetMetadata>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response25>("Asset not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload or replace a hosted asset
        /// </summary>
        /// <remarks>
        /// Upload or replace a hosted asset at a specific resource path.
        /// </remarks>
        /// <param name="path">The resource path of a hosted asset.</param>
        /// <param name="body">The hosted asset file and its metadata. (Must use
        /// <br/>`Content-Type: multipart/mixed`)</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully added/replaced the hosted asset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUploadHostedAssetAsync(string path, Body21 body, string groupId, string appId)
        {
            return AdminUploadHostedAssetAsync(path, body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload or replace a hosted asset
        /// </summary>
        /// <remarks>
        /// Upload or replace a hosted asset at a specific resource path.
        /// </remarks>
        /// <param name="path">The resource path of a hosted asset.</param>
        /// <param name="body">The hosted asset file and its metadata. (Must use
        /// <br/>`Content-Type: multipart/mixed`)</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully added/replaced the hosted asset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUploadHostedAssetAsync(string path, Body21 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (path == null)
                throw new System.ArgumentNullException("path");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/hosting/assets/asset?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("path") + "=").Append(System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("There is an error in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update the metadata attributes of a hosted asset
        /// </summary>
        /// <remarks>
        /// Update the metadata attributes of a hosted asset at a specific resource
        /// <br/>path.
        /// </remarks>
        /// <param name="path">The resource path of a hosted asset.</param>
        /// <param name="body">The new metadata attributes for the hosted asset. These attributes
        /// <br/>replace all existing attributes for the file.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully updated the hosted asset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateHostedAssetAsync(string path, Body22 body, string groupId, string appId)
        {
            return AdminUpdateHostedAssetAsync(path, body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the metadata attributes of a hosted asset
        /// </summary>
        /// <remarks>
        /// Update the metadata attributes of a hosted asset at a specific resource
        /// <br/>path.
        /// </remarks>
        /// <param name="path">The resource path of a hosted asset.</param>
        /// <param name="body">The new metadata attributes for the hosted asset. These attributes
        /// <br/>replace all existing attributes for the file.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Successfully updated the hosted asset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateHostedAssetAsync(string path, Body22 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (path == null)
                throw new System.ArgumentNullException("path");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/hosting/assets/asset?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("path") + "=").Append(System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("There is an error in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List group billing usage in a given period
        /// </summary>
        /// <remarks>
        /// List the request, compute, sync, and data transfer usage in a given
        /// <br/>period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="start">The ISO 8601 date and time of the start of the query period. Default is
        /// <br/>00:00:00 UTC on the first day of the current month.</param>
        /// <param name="end">The ISO 8601 date and time of the end of the query period. Default is
        /// <br/>23:59:59 UTC on the the last day of the current month.</param>
        /// <param name="granularity">Specifies the granularity of the query period, either P31D (31 day) or
        /// <br/>PT1H (1 hour). Default is P31D.</param>
        /// <returns>The measurements were successfully returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response26> AdminMeasurementsAsync(string groupId, string start, string end, Granularity? granularity)
        {
            return AdminMeasurementsAsync(groupId, start, end, granularity, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List group billing usage in a given period
        /// </summary>
        /// <remarks>
        /// List the request, compute, sync, and data transfer usage in a given
        /// <br/>period for [billing](https://www.mongodb.com/docs/realm/billing) purposes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="start">The ISO 8601 date and time of the start of the query period. Default is
        /// <br/>00:00:00 UTC on the first day of the current month.</param>
        /// <param name="end">The ISO 8601 date and time of the end of the query period. Default is
        /// <br/>23:59:59 UTC on the the last day of the current month.</param>
        /// <param name="granularity">Specifies the granularity of the query period, either P31D (31 day) or
        /// <br/>PT1H (1 hour). Default is P31D.</param>
        /// <returns>The measurements were successfully returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response26> AdminMeasurementsAsync(string groupId, string start, string end, Granularity? granularity, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/measurements?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (end != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (granularity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("granularity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(granularity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("There is an error in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List app billing usage
        /// </summary>
        /// <remarks>
        /// List the request, compute, sync, data transfer, and memory usage of a
        /// <br/>specific app in a given period for
        /// <br/>[billing](https://www.mongodb.com/docs/realm/billing) purposes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="start">The ISO 8601 date and time of the start of the query period. Default is
        /// <br/>00:00:00 UTC on the first day of the current month.</param>
        /// <param name="end">The ISO 8601 date and time of the end of the query period. Default is
        /// <br/>23:59:59 UTC on the the last day of the current month.</param>
        /// <param name="granularity">Specifies the granularity of the query period, either P31D (31 day) or
        /// <br/>PT1H (1 hour). Default is P31D.</param>
        /// <returns>The measurements were successfully returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response27> AdminAppMeasurementsAsync(string groupId, string appId, string start, string end, Granularity2? granularity)
        {
            return AdminAppMeasurementsAsync(groupId, appId, start, end, granularity, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List app billing usage
        /// </summary>
        /// <remarks>
        /// List the request, compute, sync, data transfer, and memory usage of a
        /// <br/>specific app in a given period for
        /// <br/>[billing](https://www.mongodb.com/docs/realm/billing) purposes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="start">The ISO 8601 date and time of the start of the query period. Default is
        /// <br/>00:00:00 UTC on the first day of the current month.</param>
        /// <param name="end">The ISO 8601 date and time of the end of the query period. Default is
        /// <br/>23:59:59 UTC on the the last day of the current month.</param>
        /// <param name="granularity">Specifies the granularity of the query period, either P31D (31 day) or
        /// <br/>PT1H (1 hour). Default is P31D.</param>
        /// <returns>The measurements were successfully returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response27> AdminAppMeasurementsAsync(string groupId, string appId, string start, string end, Granularity2? granularity, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/measurements?");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (end != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (granularity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("granularity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(granularity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("There is an error in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List schemas
        /// </summary>
        /// <remarks>
        /// List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> AdminListSchemasAsync(string groupId, string appId)
        {
            return AdminListSchemasAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List schemas
        /// </summary>
        /// <remarks>
        /// List all defined [schemas](https://www.mongodb.com/docs/realm/schemas).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> AdminListSchemasAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/schemas");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous2>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a schema
        /// </summary>
        /// <remarks>
        /// Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response28> AdminCreateSchemaAsync(Body23 body, string groupId, string appId)
        {
            return AdminCreateSchemaAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a schema
        /// </summary>
        /// <remarks>
        /// Define a new [schema](https://www.mongodb.com/docs/realm/schemas) for a linked collection.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response28> AdminCreateSchemaAsync(Body23 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/schemas");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a schema
        /// </summary>
        /// <remarks>
        /// Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="schemaId">The unique `_id` value of a schema.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response29> AdminGetSchemaAsync(string groupId, string appId, string schemaId)
        {
            return AdminGetSchemaAsync(groupId, appId, schemaId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a schema
        /// </summary>
        /// <remarks>
        /// Get a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="schemaId">The unique `_id` value of a schema.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response29> AdminGetSchemaAsync(string groupId, string appId, string schemaId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (schemaId == null)
                throw new System.ArgumentNullException("schemaId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/schemas/{schemaId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{schemaId}", System.Uri.EscapeDataString(ConvertToString(schemaId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="schemaId">The unique `_id` value of a schema.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateSchemaAsync(Body24 body, string groupId, string appId, string schemaId)
        {
            return AdminUpdateSchemaAsync(body, groupId, appId, schemaId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Replace an existing [schema](https://www.mongodb.com/docs/realm/schemas) with a new one.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="schemaId">The unique `_id` value of a schema.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateSchemaAsync(Body24 body, string groupId, string appId, string schemaId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (schemaId == null)
                throw new System.ArgumentNullException("schemaId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/schemas/{schemaId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{schemaId}", System.Uri.EscapeDataString(ConvertToString(schemaId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="schemaId">The unique `_id` value of a schema.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteSchemaAsync(string groupId, string appId, string schemaId)
        {
            return AdminDeleteSchemaAsync(groupId, appId, schemaId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Delete a specific [schema](https://www.mongodb.com/docs/realm/schemas) by its `_id` value.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="schemaId">The unique `_id` value of a schema.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteSchemaAsync(string groupId, string appId, string schemaId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (schemaId == null)
                throw new System.ArgumentNullException("schemaId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/schemas/{schemaId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{schemaId}", System.Uri.EscapeDataString(ConvertToString(schemaId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all endpoints
        /// </summary>
        /// <remarks>
        /// Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous3>> AdminGetAllEndpointsAsync(string groupId, string appId)
        {
            return AdminGetAllEndpointsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all endpoints
        /// </summary>
        /// <remarks>
        /// Get all [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configurations.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous3>> AdminGetAllEndpointsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/endpoints");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous3>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an endpoint
        /// </summary>
        /// <remarks>
        /// Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
        /// </remarks>
        /// <param name="body">A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response30> AdminCreateEndpointAsync(Endpoint body, string groupId, string appId)
        {
            return AdminCreateEndpointAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an endpoint
        /// </summary>
        /// <remarks>
        /// Create a new [endpoint](https://www.mongodb.com/docs/realm/endpoints/).
        /// </remarks>
        /// <param name="body">A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the new endpoint.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response30> AdminCreateEndpointAsync(Endpoint body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/endpoints");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response30>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an endpoint
        /// </summary>
        /// <remarks>
        /// Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)'s configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="endpointId">The unique `_id` value of an endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response31> AdminGetEndpointAsync(string groupId, string appId, string endpointId)
        {
            return AdminGetEndpointAsync(groupId, appId, endpointId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an endpoint
        /// </summary>
        /// <remarks>
        /// Get a specific [endpoint](https://www.mongodb.com/docs/realm/endpoints/)'s configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="endpointId">The unique `_id` value of an endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response31> AdminGetEndpointAsync(string groupId, string appId, string endpointId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/endpoints/{endpointId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response31>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify an endpoint
        /// </summary>
        /// <remarks>
        /// Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
        /// </remarks>
        /// <param name="body">A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="endpointId">The unique `_id` value of an endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response32> AdminModifyEndpointAsync(Endpoint body, string groupId, string appId, string endpointId)
        {
            return AdminModifyEndpointAsync(body, groupId, appId, endpointId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an endpoint
        /// </summary>
        /// <remarks>
        /// Modify an existing [endpoint](https://www.mongodb.com/docs/realm/endpoints/) configuration.
        /// </remarks>
        /// <param name="body">A valid, updated [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints/) for the endpoint.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="endpointId">The unique `_id` value of an endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response32> AdminModifyEndpointAsync(Endpoint body, string groupId, string appId, string endpointId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/endpoints/{endpointId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response32>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an endpoint
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="endpointId">The unique `_id` value of an endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> AdminDeleteEndpointAsync(string groupId, string appId, string endpointId)
        {
            return AdminDeleteEndpointAsync(groupId, appId, endpointId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an endpoint
        /// </summary>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="endpointId">The unique `_id` value of an endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> AdminDeleteEndpointAsync(string groupId, string appId, string endpointId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/endpoints/{endpointId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the Data API Configuration
        /// </summary>
        /// <remarks>
        /// Get your app's [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DataApiConfig> AdminGetDataApiConfigAsync(string groupId, string appId)
        {
            return AdminGetDataApiConfigAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the Data API Configuration
        /// </summary>
        /// <remarks>
        /// Get your app's [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DataApiConfig> AdminGetDataApiConfigAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/data_api/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataApiConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable the Data API
        /// </summary>
        /// <remarks>
        /// Create your app's [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
        /// </remarks>
        /// <param name="body">A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DataApiConfig> AdminCreateDataApiConfigAsync(DataApiConfig body, string groupId, string appId)
        {
            return AdminCreateDataApiConfigAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable the Data API
        /// </summary>
        /// <remarks>
        /// Create your app's [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
        /// </remarks>
        /// <param name="body">A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DataApiConfig> AdminCreateDataApiConfigAsync(DataApiConfig body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/data_api/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataApiConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify the Data API
        /// </summary>
        /// <remarks>
        /// Update your app's [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
        /// </remarks>
        /// <param name="body">A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminModifyDataApiConfigAsync(DataApiConfig body, string groupId, string appId)
        {
            return AdminModifyDataApiConfigAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify the Data API
        /// </summary>
        /// <remarks>
        /// Update your app's [Data API](https://www.mongodb.com/docs/atlas/app-services/data-api/generated-endpoints/) configuration.
        /// </remarks>
        /// <param name="body">A valid [configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/http_endpoints#std-label-appconfig-data-api-endpoints) for the endpoint.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminModifyDataApiConfigAsync(DataApiConfig body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/data_api/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Data API versions
        /// </summary>
        /// <remarks>
        /// List all possible Data API versions.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataApiVersion>> AdminGetDataApiVersionsAsync(string groupId, string appId)
        {
            return AdminGetDataApiVersionsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Data API versions
        /// </summary>
        /// <remarks>
        /// List all possible Data API versions.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataApiVersion>> AdminGetDataApiVersionsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/data_api/versions");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DataApiVersion>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Run a query or mutation
        /// </summary>
        /// <remarks>
        /// Run a query or mutation as a system user that bypasses
        /// <br/>authentication and data access rules. You can access metadata
        /// <br/>about your API, including its schema, with an
        /// <br/>[introspection](https://graphql.org/learn/introspection/) query.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response33> AdminRunGraphQLOperationAsync(Body25 body, string groupId, string appId)
        {
            return AdminRunGraphQLOperationAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Run a query or mutation
        /// </summary>
        /// <remarks>
        /// Run a query or mutation as a system user that bypasses
        /// <br/>authentication and data access rules. You can access metadata
        /// <br/>about your API, including its schema, with an
        /// <br/>[introspection](https://graphql.org/learn/introspection/) query.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response33> AdminRunGraphQLOperationAsync(Body25 body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/graphql");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response33>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get GraphQL API Configuration
        /// </summary>
        /// <remarks>
        /// Get your app's [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GraphQLConfig> AdminGetGraphQLConfigAsync(string groupId, string appId)
        {
            return AdminGetGraphQLConfigAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get GraphQL API Configuration
        /// </summary>
        /// <remarks>
        /// Get your app's [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GraphQLConfig> AdminGetGraphQLConfigAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/graphql/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GraphQLConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update GraphQL API Configuration
        /// </summary>
        /// <remarks>
        /// Update your app's [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
        /// </remarks>
        /// <param name="body">A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminUpdateGraphQLConfigAsync(GraphQLConfig body, string groupId, string appId)
        {
            return AdminUpdateGraphQLConfigAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update GraphQL API Configuration
        /// </summary>
        /// <remarks>
        /// Update your app's [GraphQL API](https://www.mongodb.com/docs/atlas/app-services/graphql/) configuration.
        /// </remarks>
        /// <param name="body">A valid [GraphQL API configuration object](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-graphql).</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminUpdateGraphQLConfigAsync(GraphQLConfig body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/graphql/config");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Cannot Set `use_natural_pluralization` to `false`", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all custom resolvers
        /// </summary>
        /// <remarks>
        /// Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app's GraphQL API.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomResolver>> AdminGetAllCustomResolversAsync(string groupId, string appId)
        {
            return AdminGetAllCustomResolversAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all custom resolvers
        /// </summary>
        /// <remarks>
        /// Get all [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configurations from your app's GraphQL API.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomResolver>> AdminGetAllCustomResolversAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/graphql/custom_resolvers");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomResolver>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a custom resolver
        /// </summary>
        /// <remarks>
        /// Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
        /// </remarks>
        /// <param name="body">A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomResolver> AdminCreateCustomResolverAsync(CustomResolver body, string groupId, string appId)
        {
            return AdminCreateCustomResolverAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a custom resolver
        /// </summary>
        /// <remarks>
        /// Create a new [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/).
        /// </remarks>
        /// <param name="body">A valid [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomResolver> AdminCreateCustomResolverAsync(CustomResolver body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/graphql/custom_resolvers");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomResolver>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a custom resolver
        /// </summary>
        /// <remarks>
        /// Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="customResolverId">The unique `_id` value of a custom resolver.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomResolver> AdminGetCustomResolverAsync(string groupId, string appId, string customResolverId)
        {
            return AdminGetCustomResolverAsync(groupId, appId, customResolverId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a custom resolver
        /// </summary>
        /// <remarks>
        /// Get a specific [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="customResolverId">The unique `_id` value of a custom resolver.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomResolver> AdminGetCustomResolverAsync(string groupId, string appId, string customResolverId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (customResolverId == null)
                throw new System.ArgumentNullException("customResolverId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/graphql/custom_resolvers/{customResolverId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customResolverId}", System.Uri.EscapeDataString(ConvertToString(customResolverId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomResolver>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a custom resolver
        /// </summary>
        /// <remarks>
        /// Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
        /// </remarks>
        /// <param name="body">A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="customResolverId">The unique `_id` value of a custom resolver.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminModifyCustomResolverAsync(CustomResolver body, string groupId, string appId, string customResolverId)
        {
            return AdminModifyCustomResolverAsync(body, groupId, appId, customResolverId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a custom resolver
        /// </summary>
        /// <remarks>
        /// Modify an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
        /// </remarks>
        /// <param name="body">A valid, updated [custom resolver configuration](https://www.mongodb.com/docs/atlas/app-services/reference/config/graphql#std-label-appconfig-custom-resolver) object.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="customResolverId">The unique `_id` value of a custom resolver.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminModifyCustomResolverAsync(CustomResolver body, string groupId, string appId, string customResolverId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (customResolverId == null)
                throw new System.ArgumentNullException("customResolverId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/graphql/custom_resolvers/{customResolverId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customResolverId}", System.Uri.EscapeDataString(ConvertToString(customResolverId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a custom resolver
        /// </summary>
        /// <remarks>
        /// Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="customResolverId">The unique `_id` value of a custom resolver.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminDeleteCustomResolverAsync(string groupId, string appId, string customResolverId)
        {
            return AdminDeleteCustomResolverAsync(groupId, appId, customResolverId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a custom resolver
        /// </summary>
        /// <remarks>
        /// Delete an existing [custom resolver](https://www.mongodb.com/docs/realm/graphql/custom-resolvers/) configuration.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <param name="customResolverId">The unique `_id` value of a custom resolver.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminDeleteCustomResolverAsync(string groupId, string appId, string customResolverId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (customResolverId == null)
                throw new System.ArgumentNullException("customResolverId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/graphql/custom_resolvers/{customResolverId}");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customResolverId}", System.Uri.EscapeDataString(ConvertToString(customResolverId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get validation settings
        /// </summary>
        /// <remarks>
        /// Get the current validation level and action for reads and writes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GraphQLValidationSettings> AdminGetGraphQLValidationSettingsAsync(string groupId, string appId)
        {
            return AdminGetGraphQLValidationSettingsAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get validation settings
        /// </summary>
        /// <remarks>
        /// Get the current validation level and action for reads and writes.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GraphQLValidationSettings> AdminGetGraphQLValidationSettingsAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/validation_settings/graphql");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GraphQLValidationSettings>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify validation settings
        /// </summary>
        /// <remarks>
        /// Set the validation level and action for reads and writes.
        /// </remarks>
        /// <param name="body">The updated validation levels and actions.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminSetGraphQLValidationSettingsAsync(GraphQLValidationSettings body, string groupId, string appId)
        {
            return AdminSetGraphQLValidationSettingsAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify validation settings
        /// </summary>
        /// <remarks>
        /// Set the validation level and action for reads and writes.
        /// </remarks>
        /// <param name="body">The updated validation levels and actions.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminSetGraphQLValidationSettingsAsync(GraphQLValidationSettings body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/validation_settings/graphql");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Null Type Schema Validation Setting
        /// </summary>
        /// <remarks>
        /// Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NullTypeSchemaValidationSetting> AdminGetNullTypeSchemaValidationSettingAsync(string groupId, string appId)
        {
            return AdminGetNullTypeSchemaValidationSettingAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Null Type Schema Validation Setting
        /// </summary>
        /// <remarks>
        /// Check if [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types) is enabled.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NullTypeSchemaValidationSetting> AdminGetNullTypeSchemaValidationSettingAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/validation_settings/null_type_schema_validation");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NullTypeSchemaValidationSetting>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set Null Type Schema Validation Setting
        /// </summary>
        /// <remarks>
        /// Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminSetNullTypeSchemaValidationSettingAsync(NullTypeSchemaValidationSetting body, string groupId, string appId)
        {
            return AdminSetNullTypeSchemaValidationSettingAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Null Type Schema Validation Setting
        /// </summary>
        /// <remarks>
        /// Enable or disable [null type schema validation](https://www.mongodb.com/docs/atlas/app-services/schemas/enforce-a-schema/#validate-null-types).
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminSetNullTypeSchemaValidationSettingAsync(NullTypeSchemaValidationSetting body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/validation_settings/null_type_schema_validation");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a Deployment Migration
        /// </summary>
        /// <remarks>
        /// Get metadata and status for the current deployment migration, if one exists.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeploymentMigration> AdminGetDeploymentMigrationAsync(string groupId, string appId)
        {
            return AdminGetDeploymentMigrationAsync(groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a Deployment Migration
        /// </summary>
        /// <remarks>
        /// Get metadata and status for the current deployment migration, if one exists.
        /// </remarks>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeploymentMigration> AdminGetDeploymentMigrationAsync(string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/deployment_migration");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeploymentMigration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("App not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a Deployment Migration
        /// </summary>
        /// <remarks>
        /// Start a new deployment migration.
        /// </remarks>
        /// <param name="body">The deployment model and cloud provider region that the App should migrate to.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Migration started</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AdminCreateDeploymentMigrationAsync(AppDeploymentSettings body, string groupId, string appId)
        {
            return AdminCreateDeploymentMigrationAsync(body, groupId, appId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a Deployment Migration
        /// </summary>
        /// <remarks>
        /// Start a new deployment migration.
        /// </remarks>
        /// <param name="body">The deployment model and cloud provider region that the App should migrate to.</param>
        /// <param name="groupId">An Atlas [Project/Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).</param>
        /// <param name="appId">The ObjectID of your application.
        /// <br/>[The App Services API Project and Application IDs section](#section/Project-and-Application-IDs) demonstrates how to find this
        /// <br/>value.</param>
        /// <returns>Migration started</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AdminCreateDeploymentMigrationAsync(AppDeploymentSettings body, string groupId, string appId, System.Threading.CancellationToken cancellationToken)
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            if (appId == null)
                throw new System.ArgumentNullException("appId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/groups/{groupId}/apps/{appId}/deployment_migration");
            urlBuilder_.Replace("{groupId}", System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appId}", System.Uri.EscapeDataString(ConvertToString(appId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Request is invalid, incomplete, or a no-op", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("App not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiKey
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Disabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiKeyResponse
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Disabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentMigration
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentMigrationStatus Status { get; set; }

        /// <summary>
        /// A description of the current migration status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// A timestamp of the most recent update to the deployment migration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        /// <summary>
        /// The App's deployment model and cloud provider region at the start of the migration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AppDeploymentSettings From { get; set; }

        /// <summary>
        /// The migration's target deployment model and cloud provider
        /// <br/>region. At the end of a successful migration, the App uses
        /// <br/>these deployment settings instead of the settings described
        /// <br/>by `from`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AppDeploymentSettings To { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppDeploymentSettings
    {
        [Newtonsoft.Json.JsonProperty("deployment_model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentModel Deployment_model { get; set; }

        [Newtonsoft.Json.JsonProperty("provider_region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudProviderRegionId Provider_region { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An identifier of the location where an app server is physically
    /// <br/>deployed to, regardless of the cloud provider that hosts the
    /// <br/>app.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeploymentLocation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"US-VA")]
        USVA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"US-OR")]
        USOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DE-FF")]
        DEFF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IE")]
        IE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"IN-MB")]
        INMB = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SG")]
        SG = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BR-SP")]
        BRSP = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class App
    {
        /// <summary>
        /// The name of the application. Must begin with a letter and
        /// <br/>may only contain ASCII letters, numbers, underscores, and
        /// <br/>hyphens.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The short identifier of a cloud provider-specific deployment region.
        /// <br/>Some regions are available for global deployment while others are
        /// <br/>only available for local apps. See [Cloud Deployment
        /// <br/>Regions](https://www.mongodb.com/docs/atlas/app-services/apps/deployment-models-and-regions/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provider_region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudProviderRegionId Provider_region { get; set; }

        /// <summary>
        /// The application's physical deployment location. This should
        /// <br/>agree with the more specific `provider_region` value. For
        /// <br/>example, an App with a `provider_region` of `aws-us-west-2`
        /// <br/>maps to a `location` of `US-OR`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentLocation Location { get; set; }

        [Newtonsoft.Json.JsonProperty("deployment_model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentModel Deployment_model { get; set; }

        [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AppEnvironment Environment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An object that describes a new app to create
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppConstructor : App
    {
        /// <summary>
        /// The id of an [App Services template
        /// <br/>app](https://www.mongodb.com/docs/atlas/app-services/reference/template-apps)
        /// <br/>to use as a base for the new app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template_id { get; set; }

        [Newtonsoft.Json.JsonProperty("data_source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataSource Data_source { get; set; }

    }

    /// <summary>
    /// A specific, existing application.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppInstance : App
    {
        /// <summary>
        /// The application's unique internal ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The application's public App ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client_app_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Client_app_id { get; set; }

        /// <summary>
        /// The application's associated domain ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domain_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain_id { get; set; }

        /// <summary>
        /// The application's [Atlas Project/Group ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        /// <summary>
        /// The time this app was last used in [UNIX time](https://en.wikipedia.org/wiki/Unix_time) (i.e. the number of seconds since Jan 1, 1970).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_used", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Last_used { get; set; }

        /// <summary>
        /// The time this app was last modified in [UNIX time](https://en.wikipedia.org/wiki/Unix_time) (i.e. the number of seconds since Jan 1, 1970).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_modified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Last_modified { get; set; }

        /// <summary>
        /// The product this app is for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AppInstanceProduct Product { get; set; }

    }

    /// <summary>
    /// The application's environment. An empty string indicates that the app does not have a specified environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AppEnvironment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"development")]
        Development = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"testing")]
        Testing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"qa")]
        Qa = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"production")]
        Production = 4,

    }

    /// <summary>
    /// An application [deployment model](https://www.mongodb.com/docs/atlas/app-services/apps/deployment-models-and-regions/#deployment-models).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeploymentModel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL")]
        LOCAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CloudProviderRegionId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AwsDeploymentRegion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"aws-us-east-1")]
        AwsUsEast1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"aws-us-west-2")]
        AwsUsWest2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"aws-us-east-2")]
        AwsUsEast2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"aws-eu-central-1")]
        AwsEuCentral1 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"aws-eu-west-1")]
        AwsEuWest1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"aws-eu-west-2")]
        AwsEuWest2 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"aws-ap-southeast-1")]
        AwsApSoutheast1 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"aws-ap-southeast-2")]
        AwsApSoutheast2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"aws-ap-south-1")]
        AwsApSouth1 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"aws-sa-east-1")]
        AwsSaEast1 = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AzureDeploymentRegion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"azure-eastus2")]
        AzureEastus2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"azure-westus")]
        AzureWestus = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"azure-westeurope")]
        AzureWesteurope = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"azure-eastasia")]
        AzureEastasia = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"azure-southeastasia")]
        AzureSoutheastasia = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GcpDeploymentRegion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"gcp-us-central1")]
        GcpUsCentral1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"gcp-us-east4")]
        GcpUsEast4 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"gcp-us-west1")]
        GcpUsWest1 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"gcp-europe-west1")]
        GcpEuropeWest1 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"gcp-asia-south1")]
        GcpAsiaSouth1 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudProviderRegion
    {
        /// <summary>
        /// The short identifier of a cloud provider-specific deployment region.
        /// <br/>Some regions are available for global deployment while others are
        /// <br/>only available for local apps. See [Cloud Deployment
        /// <br/>Regions](https://www.mongodb.com/docs/atlas/app-services/apps/deployment-models-and-regions/#cloud-deployment-regions).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CloudProviderRegionId Id { get; set; }

        /// <summary>
        /// A descriptive name for the region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The cloud provider that hosts the region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cloud_provider", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cloud_provider { get; set; }

        /// <summary>
        /// The country where the region is physically hosted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// The [deployment
        /// <br/>models](https://www.mongodb.com/docs/atlas/app-services/apps/deployment-models-and-regions/#deployment-models)
        /// <br/>that this region supports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deployment_models", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<DeploymentModel> Deployment_models { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomUserDataConfig
    {
        /// <summary>
        /// The `_id` value of the linked MongoDB data source that contains
        /// <br/>custom user data.
        /// <br/>
        /// <br/>See [Get a Data Source](#operation/adminGetService).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mongo_service_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mongo_service_id { get; set; }

        /// <summary>
        /// The name of the database that contains custom user data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("database_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Database_name { get; set; }

        /// <summary>
        /// The name of the collection that contains custom user data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collection_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Collection_name { get; set; }

        /// <summary>
        /// The name of a field that appears in every custom user data
        /// <br/>document and that contains the user account ID of each
        /// <br/>document's corresponding user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id_field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id_field { get; set; }

        /// <summary>
        /// The `_id` value of a [user creation
        /// <br/>function](https://www.mongodb.com/docs/atlas/app-services/users/enable-custom-user-data/#std-label-user-creation-function)
        /// <br/>that runs whenever a new user registers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("on_user_creation_function_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string On_user_creation_function_id { get; set; }

        /// <summary>
        /// If `true`, custom user data is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BasicError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildInfo
    {
        /// <summary>
        /// Human-readable version information about the mongod instance. This
        /// <br/>string will take the format `&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>
        /// The commit identifier that identifies the state of the code use to build
        /// <br/>the mongod.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gitVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GitVersion { get; set; }

        /// <summary>
        /// An array that conveys version information about the mongod instance. See
        /// <br/>version for a more readable version of this string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionArray", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> VersionArray { get; set; }

        /// <summary>
        /// A string that reports the JavaScript engine used in the mongod instance.
        /// <br/>By default, this is `mozjs` after version `3.2`, and previously `V8`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("javascriptEngine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JavascriptEngine { get; set; }

        /// <summary>
        /// A number that reflects the target processor architecture of the mongod
        /// <br/>binary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bits { get; set; }

        /// <summary>
        /// A boolean that reflects whether or not the `mongod` instance was built
        /// <br/>with debugging options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debug", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Debug { get; set; }

        /// <summary>
        /// A number that reports the [Maximum BSON Document
        /// <br/>Size](https://www.mongodb.com/docs/manual/reference/limits#std-label-limit-bson-document-size)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxBsonObjectSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxBsonObjectSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DependenciesSummary
    {
        /// <summary>
        /// The dependency collection's unique internal ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The application's deployment region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        /// <summary>
        /// The unique `_id` value of the MongoDB Cloud user that uploaded the
        /// <br/>dependency collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

        /// <summary>
        /// The time at which the dependencies were uploaded in [Unix
        /// <br/>time](https://en.wikipedia.org/wiki/Unix_time) (number of seconds since
        /// <br/>January 1, 1970 at 00:00 UTC).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_modified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Last_modified { get; set; }

        /// <summary>
        /// An array of documents that each describe a dependency uploaded to the
        /// <br/>application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dependencies_list", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Dependency> Dependencies_list { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dependency
    {
        /// <summary>
        /// The name of the uploaded dependency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The version of the uploaded dependency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentDraft
    {
        /// <summary>
        /// The unique ID of the draft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The unique `_id` value of the MongoDB Cloud user that created the draft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("app", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AppInstance App { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deployment
    {
        /// <summary>
        /// The unique ID of the deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The name of the deployment. By default, this is the same
        /// <br/>value as ``_id``.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The unique `_id` value of the Atlas App Services App.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("app_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string App_id { get; set; }

        /// <summary>
        /// The unique `_id` value of the deployment draft associated with the
        /// <br/>deployment, if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("draft_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Draft_id { get; set; }

        /// <summary>
        /// The unique `_id` value of the MongoDB Cloud user that deployed the draft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

        /// <summary>
        /// The time at which the deployment was made. Represented as the number of
        /// <br/>seconds since January 1, 1970.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deployed_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Deployed_at { get; set; }

        /// <summary>
        /// The deployment method used to create the deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        /// <summary>
        /// The commit hash of the deployment (Automatic GitHub Deployment)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commit { get; set; }

        /// <summary>
        /// A message that indicates whether or not the deployment was
        /// <br/>successful.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The error message of the error that caused the deployment to fail, if
        /// <br/>applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status_error_message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status_error_message { get; set; }

        /// <summary>
        /// A link to the diff of changes in the deployment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diff_url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Diff_url { get; set; }

        [Newtonsoft.Json.JsonProperty("remote_location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentLocation Remote_location { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A configuration file that controls your app's deployment behavior.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeploymentConfig
    {
        /// <summary>
        /// If `true`, every change made in the Admin UI deploys
        /// <br/>automatically on save. If `false`, changes are grouped into
        /// <br/>a deployment draft that you deploy separately.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui_drafts_disabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Ui_drafts_disabled { get; set; }

        /// <summary>
        /// Configuration for automatic deployment methods
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automatic_deployment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Automatic_deployment Automatic_deployment { get; set; } = new Automatic_deployment();

        /// <summary>
        /// The time this configuration was last modified represented by the number of seconds since the UNIX epoch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_modified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Last_modified { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Diff
    {
        /// <summary>
        /// A list where each item is the line-by-line diff for a specific
        /// <br/>configuration file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diffs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Diffs { get; set; }

        /// <summary>
        /// The filenames of hosted files that have been added, removed, or
        /// <br/>modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hosting_files_diff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hosting_files_diff Hosting_files_diff { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Endpoint
    {
        [Newtonsoft.Json.JsonProperty("route", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Route { get; set; }

        [Newtonsoft.Json.JsonProperty("http_method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointHttp_method Http_method { get; set; }

        [Newtonsoft.Json.JsonProperty("function_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Function_id { get; set; }

        [Newtonsoft.Json.JsonProperty("validation_method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointValidation_method Validation_method { get; set; }

        /// <summary>
        /// If `validation_method` is set to `"SECRET_AS_QUERY_PARAM"`
        /// <br/>or `"VERIFY_PAYLOAD"`, this is the `_id` of the
        /// <br/>[Secret](https://www.mongodb.com/docs/atlas/app-services/values-and-secrets/)
        /// <br/>that authorizes requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secret_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret_id { get; set; }

        /// <summary>
        /// The default [data format](https://mongodb.com/docs/atlas/app-services/data-api/#data-formats) returned by custom HTTPS endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("return_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointDataFormat Return_type { get; set; }

        [Newtonsoft.Json.JsonProperty("respond_result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Respond_result { get; set; }

        [Newtonsoft.Json.JsonProperty("fetch_custom_user_data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Fetch_custom_user_data { get; set; }

        [Newtonsoft.Json.JsonProperty("create_user_on_auth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Create_user_on_auth { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A [data format](https://mongodb.com/docs/atlas/app-services/data-api/#data-formats) supported by the Data API &amp; custom endpoints.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointDataFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"JSON")]
        JSON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EJSON")]
        EJSON = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentValueDescription
    {
        /// <summary>
        /// The environment value's internal ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The environment value name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The time this configuration was last modified represented by the number of seconds since the UNIX epoch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_modified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Last_modified { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnvironmentValue : EnvironmentValueDescription
    {
        /// <summary>
        /// An object that maps environment names to values. The
        /// <br/>environment value resolves to the current active
        /// <br/>environment's mapped value.
        /// <br/>
        /// <br/>If no value is mapped to the current active environment,
        /// <br/>the environment value resolves to `undefined`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Values Values { get; set; }

    }

    /// <summary>
    /// Any valid JSON value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnyValue
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A supported version of the Data API.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataApiVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"v1")]
        V1 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataApiConfig
    {
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("versions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<DataApiVersion> Versions { get; set; }

        /// <summary>
        /// The default [data format](https://mongodb.com/docs/atlas/app-services/data-api/#data-formats) returned by Data API endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("return_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointDataFormat Return_type { get; set; }

        [Newtonsoft.Json.JsonProperty("create_user_on_auth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Create_user_on_auth { get; set; }

        /// <summary>
        /// An application user's account ID. If defined, endpoints will always run as the specified user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("run_as_user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Run_as_user_id { get; set; }

        /// <summary>
        /// Stringified source code for a function that returns an
        /// <br/>application user's account ID. If defined, endpoints execute
        /// <br/>the function on every request and run as the user with the
        /// <br/>ID returned from the function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("run_as_user_id_script_source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Run_as_user_id_script_source { get; set; }

        [Newtonsoft.Json.JsonProperty("validation_method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataApiConfigValidation_method Validation_method { get; set; }

        /// <summary>
        /// If `validation_method` is set to `"SECRET_AS_QUERY_PARAM"`
        /// <br/>or `"VERIFY_PAYLOAD"`, this is the `name` of the
        /// <br/>[Secret](https://www.mongodb.com/docs/atlas/app-services/values-and-secrets/)
        /// <br/>that authorizes requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secret_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret_name { get; set; }

        /// <summary>
        /// A JSON expression that evaluates to `true` if an endpoint is
        /// <br/>allowed to run in response to an incoming request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("can_evaluate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Can_evaluate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// A message that describes the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error1 { get; set; }

        /// <summary>
        /// The error type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AtlasCluster
    {
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config Config { get; set; }

        /// <summary>
        /// [Deprecated] The configuration for a third-party service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secret_config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Secret_config { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceResponse
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Version { get; set; }

        [Newtonsoft.Json.JsonProperty("last_modified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Last_modified { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReadPreferencesTagSet
    {

        [System.Runtime.Serialization.EnumMember(Value = @"server1")]
        Server1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"server2")]
        Server2 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDataSource
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateDataSourceName Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateDataSourceType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config2 Config { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AtlasFederatedInstance
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AtlasFederatedInstanceName Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AtlasFederatedInstanceType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config3 Config { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 1,

    }

    /// <summary>
    /// **THIRD-PARTY SERVICES ARE DEPRECATED**
    /// <br/>
    /// <br/>See [Third-Party Services](https://www.mongodb.com/docs/atlas/app-services/reference/services/) for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThirdPartyService
    {
        /// <summary>
        /// A unique ID for the third-party service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The third-party service name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type of third party service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ThirdPartyServiceType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLogForwarderRequest
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("log_types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<LogType> Log_types { get; set; }

        [Newtonsoft.Json.JsonProperty("log_statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<LogStatus> Log_statuses { get; set; }

        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LogForwardingPolicy Policy { get; set; }

        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LogForwardingAction Action { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LogType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"auth")]
        Auth = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"function")]
        Function = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"graphql")]
        Graphql = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"push")]
        Push = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"schema")]
        Schema = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"service")]
        Service = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"sync")]
        Sync = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"trigger")]
        Trigger = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LogStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"success")]
        Success = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogForwardingPolicy
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LogForwardingPolicyType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogForwardingAction
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LogForwardingActionType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("data_source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data_source { get; set; }

        [Newtonsoft.Json.JsonProperty("database", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Database { get; set; }

        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Collection { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A subscription to a change event stream.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventSubscription
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 1,

    }

    /// <summary>
    /// A [rule expression](https://mongodb.com/docs/atlas/app-services/rules/expressions/).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Expression
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 1,

    }

    /// <summary>
    /// A data access rule that define defines fallback user roles and query filters for collection's that don't have more specific permissions defined.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DefaultRule
    {
        /// <summary>
        /// The default rule's unique ObjectId identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// An ordered list of default user roles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Role> Roles { get; set; }

        /// <summary>
        /// A list of default [query filters](https://www.mongodb.com/docs/atlas/app-services/reference/config/data_sources/#filters).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Filter> Filters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A data access rule that defines user roles and query filters for a collection in a linked data source.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rule
    {
        /// <summary>
        /// The rule's unique ObjectId identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The name of a database in the linked data source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("database", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Database { get; set; }

        /// <summary>
        /// The name of a collection in the specified `database`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Collection { get; set; }

        /// <summary>
        /// A list of data access roles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Role> Roles { get; set; }

        /// <summary>
        /// A list of filters for incoming operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Filter> Filters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A data access role that assigns read and write permissions to a user for each document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Role
    {
        /// <summary>
        /// The role's unique ObjectId identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The role's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A rule expression that evaluates to `true` when this role applies to a user for a specific document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apply_when", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Expression Apply_when { get; set; }

        /// <summary>
        /// A rule expression that evaluates to `true` if the role has permission to add, modify, or remove all fields in the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("write", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Expression Write { get; set; }

        /// <summary>
        /// A rule expression that evaluates to `true` if the role has permission to insert a new document into the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Expression Insert { get; set; }

        /// <summary>
        /// A rule expression that evaluates to `true` if the role has permission to delete a document from the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delete", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Expression Delete { get; set; }

        /// <summary>
        /// A rule expression that evaluates to `true` if the role has permission to search the collection using [Atlas Search](https://www.mongodb.com/docs/atlas/atlas-search/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("search", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Expression Search { get; set; }

        /// <summary>
        /// Field-level rules for any fields that are not explicitly configured in the role's `properties`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NestableFieldLevelPermissions Fields { get; set; }

        /// <summary>
        /// Field-level rules for any fields that are not explicitly configured in the role's `properties`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additional_fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldLevelPermissions Additional_fields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An object that maps document field names to read and write permissions for the field and its children.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NestableFieldLevelPermissions
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Read and write permissions for a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldLevelPermissions
    {
        /// <summary>
        /// A rule expression that evaluates to `true` if the role can read the field's value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("read", Required = Newtonsoft.Json.Required.Always)]
        public Expression Read { get; set; }

        /// <summary>
        /// A rule expression that evaluates to `true` if the role can write the field's value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("write", Required = Newtonsoft.Json.Required.Always)]
        public Expression Write { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A filter that conditionally modifies incoming query operations before they run.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Filter
    {
        /// <summary>
        /// The filter's unique ObjectId identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The filter's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A rule expression that evaluates to `true` if the filter applies to an incoming query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apply_when", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Expression Apply_when { get; set; }

        /// <summary>
        /// A MongoDB query object that is merged into an incoming query before the operation runs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Query Query { get; set; }

        /// <summary>
        /// A MongoDB projection object that is merged into an incoming query before the operation runs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Projection Projection { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A MongoDB query object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Query
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A MongoDB projection object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Projection : System.Collections.Generic.Dictionary<string, double>
    {

    }

    /// <summary>
    /// [Deprecated] A rule for a third-party service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThirdPartyServiceRule
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Actions { get; set; }

        [Newtonsoft.Json.JsonProperty("when", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object When { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IncomingWebhook
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("function_source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Function_source { get; set; }

        [Newtonsoft.Json.JsonProperty("respond_result", Required = Newtonsoft.Json.Required.Always)]
        public bool Respond_result { get; set; }

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Options Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthProvider
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnonymousAuthProvider
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailConfirmationAutomatic
    {
        /// <summary>
        /// If `true`, automatically confirm new user accounts without additional verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoConfirm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AutoConfirm { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailConfirmationBuiltIn
    {
        /// <summary>
        /// If `true`, automatically confirm new user accounts without
        /// <br/>additional verification. For built-in email account
        /// <br/>confirmation, set this value to `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoConfirm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AutoConfirm { get; set; }

        /// <summary>
        /// The URL included in the email sent to new users as part of
        /// <br/>the built-in confirmation flow. The email also adds a unique
        /// <br/>confirmation `token` and `tokenId` as query parameters.
        /// <br/>
        /// <br/>This URL should handle user confirmation by passing the
        /// <br/>confirmation token to a Realm SDK's `confirmUser` function
        /// <br/>or to the Admin API [Confirm a Pending Email/Password
        /// <br/>User](#tag/email/operation/adminConfirmPendingUser)
        /// <br/>endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailConfirmationUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailConfirmationUrl { get; set; }

        /// <summary>
        /// The subject line of the email sent to new users as
        /// <br/>part of the built-in confirmation flow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmEmailSubject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfirmEmailSubject { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailConfirmationCustomFunction
    {
        /// <summary>
        /// If `true`, automatically confirm new user accounts without
        /// <br/>additional verification. For custom function account
        /// <br/>confirmation, set this value to `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoConfirm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AutoConfirm { get; set; }

        /// <summary>
        /// If `true`, new email/password user account registrations use
        /// <br/>a custom function that you define to handle the confirmation
        /// <br/>process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("runConfirmationFunction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RunConfirmationFunction { get; set; }

        /// <summary>
        /// The name of the custom function that handles the
        /// <br/>confirmation process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmationFunctionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfirmationFunctionName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PasswordRefreshBuiltIn
    {
        /// <summary>
        /// The URL included in the email sent to users as part
        /// <br/>of the built-in password reset flow. The email also
        /// <br/>adds a unique password reset `token` and `tokenId` as
        /// <br/>query parameters.
        /// <br/>
        /// <br/>This URL should handle user confirmation by passing
        /// <br/>the password reset token to a Realm SDK's `resetPassword`
        /// <br/>function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resetPasswordUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResetPasswordUrl { get; set; }

        /// <summary>
        /// The subject line of the email sent to users as
        /// <br/>part of the built-in password reset flow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resetPasswordSubject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResetPasswordSubject { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PasswordRefreshCustomFunction
    {
        /// <summary>
        /// If `true`, use a custom function that you define to handle
        /// <br/>the password reset process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("runResetFunction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RunResetFunction { get; set; }

        /// <summary>
        /// The name of the custom function that handles the password
        /// <br/>reset process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resetFunctionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResetFunctionName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailPasswordAuthProvider
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiKeyAuthProvider
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomJwtAuthProvider
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomFunctionAuthProvider
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppleAuthProvider
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleAuthProvider
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FacebookAuthProvider
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdminUser
    {
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("domain_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain_id { get; set; }

        [Newtonsoft.Json.JsonProperty("identities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserIdentity> Identities { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data Data { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdminUserType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Roles> Roles { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewFunction
    {
        /// <summary>
        /// A JSON expression that evaluates to `true` if the Function is allowed to
        /// <br/>run in response to an incoming request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("can_evaluate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Can_evaluate { get; set; }

        /// <summary>
        /// A unique name for the Function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// If `true`, the function is hidden from client applications. You can
        /// <br/>still call a private function from JSON expressions and other functions,
        /// <br/>including incoming webhooks and triggers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Always)]
        public bool Private { get; set; }

        /// <summary>
        /// The stringified source code for the function. The code must be valid
        /// <br/>ES6.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Source { get; set; }

        /// <summary>
        /// If `true`, the function executes with full privileges, bypassing rules
        /// <br/>on all services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("run_as_system", Required = Newtonsoft.Json.Required.Always)]
        public bool Run_as_system { get; set; }

        /// <summary>
        /// An application user's account ID. If defined, endpoints will always 
        /// <br/>run as the specified user. Cannot be used with 
        /// <br/>`run_as_user_id_script_source`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("run_as_user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Run_as_user_id { get; set; }

        /// <summary>
        /// The stringified source code for a 
        /// <br/>[function](https://www.mongodb.com/docs/atlas/app-services/functions/#std-label-functions)
        /// <br/>that returns an application user's account ID. If defined, endpoints 
        /// <br/>execute the function on every request and run as the user with the 
        /// <br/>ID returned from the function. Cannot be used with `run_as_user_id`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("run_as_user_id_script_source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Run_as_user_id_script_source { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Function
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// A JSON expression that evaluates to `true` if the Function is allowed to
        /// <br/>run in response to an incoming request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("can_evaluate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Can_evaluate { get; set; }

        /// <summary>
        /// A unique name for the Function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// If `true`, the function is hidden from client applications. You can
        /// <br/>still call a private function from JSON expressions and other functions,
        /// <br/>including incoming webhooks and triggers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Private { get; set; }

        /// <summary>
        /// The stringified source code for the function. The code must be valid
        /// <br/>ES6.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValueSummary
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Private { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewValue
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.Always)]
        public bool Private { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Value
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Private { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProviderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"anon-user")]
        AnonUser = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"local-userpass")]
        LocalUserpass = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"api-key")]
        ApiKey = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"oauth2-apple")]
        Oauth2Apple = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"oauth2-google")]
        Oauth2Google = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"oauth2-facebook")]
        Oauth2Facebook = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"custom-token")]
        CustomToken = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"custom-function")]
        CustomFunction = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"sent")]
        Sent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewMessage
    {
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("topic", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Topic { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageState State { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Message
    {
        [Newtonsoft.Json.JsonProperty("allowed_ips", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Allowed_ips { get; set; }

        [Newtonsoft.Json.JsonProperty("appID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppID { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message1 { get; set; }

        [Newtonsoft.Json.JsonProperty("topic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Topic { get; set; }

        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created { get; set; }

        [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sent { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageState State { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        /// <summary>
        /// The unique user account ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// A list of authentication provider identities associated with the user account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserIdentity> Identities { get; set; }

        /// <summary>
        /// The user type. Most users are `normal` and represent a
        /// <br/>specific human user. Users created through the `api-key`
        /// <br/>provider have the type `server` because they are typically
        /// <br/>used for programmatic access from a server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserType Type { get; set; }

        /// <summary>
        /// The date and time that the user account was created.
        /// <br/>Represented by the number of seconds since the UNIX epoch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creation_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Creation_date { get; set; }

        /// <summary>
        /// The date and time that the user account last logged in or
        /// <br/>authenticated a request. Represented by the number of
        /// <br/>seconds since the UNIX epoch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_authentication_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Last_authentication_date { get; set; }

        /// <summary>
        /// If `true`, the user account is inactive and cannot login or interact with App Services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        /// <summary>
        /// Metadata that describes the user. This field combines the
        /// <br/>data for all authentication identities associated with the
        /// <br/>user. The exact field names and values depend on which
        /// <br/>authentication providers the user has authenticated with.
        /// <br/>
        /// <br/>For example, if a user has linked an email/password account
        /// <br/>with their Google account, this object might contain their
        /// <br/>`email` as well as metadata fields from Google like `name`
        /// <br/>and `picture`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An authenticated identity from an authentication provider. This
    /// <br/>represents the user account within an individual auth provider
    /// <br/>and maps the account to external authentication systems.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserIdentity
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("provider_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProviderType Provider_type { get; set; }

        [Newtonsoft.Json.JsonProperty("provider_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Partition
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PbsSyncResponse
    {
        /// <summary>
        /// The Service ID for the currently synced cluster, if there is one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("service_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_id { get; set; }

        /// <summary>
        /// A list of valid partition keys based on the cluster's collection
        /// <br/>schemas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partition_fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Partition> Partition_fields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SyncDataResponse
    {
        /// <summary>
        /// The Service ID for the linked cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clusterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClusterId { get; set; }

        /// <summary>
        /// The name of the linked cluster
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clusterName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClusterName { get; set; }

        /// <summary>
        /// The service type of the linked cluster ("atlas" by default)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clusterType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClusterType { get; set; }

        [Newtonsoft.Json.JsonProperty("flexible_sync", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlexibleSync Flexible_sync { get; set; }

        /// <summary>
        /// The name of the App's Atlas Project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        /// <summary>
        /// The name of the App's Atlas Organization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orgName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrgName { get; set; }

        [Newtonsoft.Json.JsonProperty("readPreference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SyncDataResponseReadPreference ReadPreference { get; set; }

        /// <summary>
        /// If true, clients may [connect to the app over the
        /// <br/>MongoDB Wire
        /// <br/>Protocol](https://www.mongodb.com/docs/atlas/app-services/mongodb/wire-protocol/#connect-over-the-wire-protocol).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wireProtocolEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WireProtocolEnabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlexibleSync
    {
        /// <summary>
        /// The state of the sync service ("enabled", "disabled", or empty if Sync is not configured).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// An array of 
        /// <br/>[queryable field](https://www.mongodb.com/docs/atlas/app-services/sync/configure/sync-settings/#queryable-fields) 
        /// <br/>names on **any collection**.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryable_fields_names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Queryable_fields_names { get; set; }

        /// <summary>
        /// An array of 
        /// <br/>[queryable field](https://www.mongodb.com/docs/atlas/app-services/sync/configure/sync-settings/#queryable-fields) 
        /// <br/>names on the specified collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collection_queryable_fields_names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, string>> Collection_queryable_fields_names { get; set; }

        /// <summary>
        /// The version of the queryable field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryable_fields_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Queryable_fields_version { get; set; }

        /// <summary>
        /// **Deprecated**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Permissions { get; set; }

        /// <summary>
        /// The last time Sync was disabled, represented by the number of seconds since the UNIX epoch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_disabled { get; set; }

        /// <summary>
        /// The number of days the client can be offline before a client 
        /// <br/>[reset](https://www.mongodb.com/docs/atlas/app-services/sync/error-handling/client-resets/) 
        /// <br/>is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client_max_offline_days", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Client_max_offline_days { get; set; }

        /// <summary>
        /// Specifies whether the 
        /// <br/>[client reset mode](https://www.mongodb.com/docs/atlas/app-services/sync/error-handling/client-resets/#recover-unsynced-changes) 
        /// <br/>is disabled. By default, client reset mode is enabled and this value is **false**.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_recovery_mode_disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_recovery_mode_disabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnyTrigger
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Trigger
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseTrigger
    {
        /// <summary>
        /// The trigger's unique ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The trigger's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// If `true`, the trigger is disabled and does not listen for events or execute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; } = false;

        /// <summary>
        /// An object that defines configuration values for the trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Config { get; set; } = new object();

        /// <summary>
        /// The ID of the function that the trigger calls when it fires.
        /// <br/>
        /// <br/>This value is the same as `event_processors.FUNCTION.function_id`.
        /// <br/>You can either define the value here or in `event_processors.FUNCTION.function_id`.
        /// <br/>The App Services backend duplicates the value to the configuration location where you did not define it.
        /// <br/>
        /// <br/>For example, if you define `function_id`, the backend duplicates it to `event_processors.FUNCTION.function_id`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("function_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Function_id { get; set; }

        /// <summary>
        /// The name of the function that the trigger calls when it
        /// <br/>fires, i.e. the function described by `function_id`.
        /// <br/>
        /// <br/>This value is the same as `event_processors.FUNCTION.function_name`.
        /// <br/>You can either define the value here or in `event_processors.FUNCTION.function_name`.
        /// <br/>The App Services backend duplicates the value to the configuration location where you did not define it.
        /// <br/>
        /// <br/>For example, if you define `function_name`, the backend duplicates it to `event_processors.FUNCTION.function_name`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("function_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Function_name { get; set; }

        /// <summary>
        /// An object where each field name is an event processor ID and
        /// <br/>each value is an object that configures its corresponding
        /// <br/>event processor. For an example configuration object, see
        /// <br/>[Send Trigger Events to AWS
        /// <br/>EventBridge](https://www.mongodb.com/docs/realm/triggers/examples/send-events-aws-eventbridge#std-label-event_processor_example).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("event_processors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Event_processors Event_processors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatabaseTrigger : BaseTrigger
    {
        /// <summary>
        /// The trigger type. For database triggers, this value is always `"DATABASE"`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DatabaseTriggerType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config4 Config { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticationTrigger : BaseTrigger
    {
        /// <summary>
        /// The trigger type. For authentication triggers, this value is always `"AUTHENTICATION"`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthenticationTriggerType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config5 Config { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledTrigger : BaseTrigger
    {
        /// <summary>
        /// The trigger type. For scheduled triggers, this value is always `"SCHEDULED"`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScheduledTriggerType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config6 Config { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataAttribute
    {
        /// <summary>
        /// The [metadata
        /// <br/>attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes)
        /// <br/>name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The [metadata
        /// <br/>attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes)
        /// <br/>value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssetMetadata
    {
        /// <summary>
        /// The resource path of the asset
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// The size of the asset in bytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// An array of documents that each describe a [metadata
        /// <br/>attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes)
        /// <br/>that applies to the asset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attrs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataAttribute> Attrs { get; set; }

        /// <summary>
        /// The MD5 checksum hash for the asset
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostingConfiguration
    {
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HostingConfigurationStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("default_domain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Default_domain Default_domain { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostedAssetMetadata
    {
        /// <summary>
        /// The unique App ID of the Atlas App Services App that is hosting the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppId { get; set; }

        /// <summary>
        /// The time at which the hosted asset was last modified in [Unix
        /// <br/>time](https://en.wikipedia.org/wiki/Unix_time) (number of seconds since
        /// <br/>January 1, 1970 at 00:00 UTC).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_modified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Last_modified { get; set; }

        /// <summary>
        /// The full URL of the hosted asset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// The resource path of the hosted asset
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// The size of the hosted asset in bytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// An array of documents that each describe a [metadata
        /// <br/>attribute](https://www.mongodb.com/docs/realm/hosting/file-metadata-attributes)
        /// <br/>that applies to the asset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attrs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataAttribute> Attrs { get; set; }

        /// <summary>
        /// The MD5 checksum hash for the hosted asset
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshTokenExpiration
    {
        /// <summary>
        /// The time in seconds that a user session refresh token is
        /// <br/>valid for after it is issued. After this time, the token is
        /// <br/>expired and the user must re-authenticate.
        /// <br/>
        /// <br/>The expiration time must be between 30 minutes and 180 days,
        /// <br/>inclusive. The default expiration time is 60 days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiration_time_seconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1800D, 15552000D)]
        public double Expiration_time_seconds { get; set; } = 5184000D;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A [relationship](https://www.mongodb.com/docs/realm/schemas/relationships/) definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Relationship
    {
        /// <summary>
        /// A reference string for the foreign collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref { get; set; }

        /// <summary>
        /// The name of the field in the foreign collection that the relationship points to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreign_key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Foreign_key { get; set; }

        /// <summary>
        /// If `true`:
        /// <br/>
        /// <br/>- the relationship may point to many foreign documents.
        /// <br/>- the local field must be defined as an array in the collection schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_list", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_list { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Metadata the describes which linked collection the schema applies to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaMetadata
    {
        /// <summary>
        /// The data source name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data_source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data_source { get; set; }

        /// <summary>
        /// The database name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("database", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Database { get; set; }

        /// <summary>
        /// The collection name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Collection { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GraphQLConfig
    {
        /// <summary>
        /// If `true`, generated schema type names use common English
        /// <br/>pluralization whenever possible.
        /// <br/>
        /// <br/>If `false`, or if a natural pluralization cannot be
        /// <br/>determined, then plural types use the singular type
        /// <br/>name with an `"s"` appended to the end.
        /// <br/>
        /// <br/>**You cannot change this value after you create your App.
        /// <br/>This value is `true` for all new Apps.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("use_natural_pluralization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Use_natural_pluralization { get; set; }

        /// <summary>
        /// If `true`, the GraphQL API blocks [introspection queries](https://graphql.org/learn/introspection/) from clients.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_schema_introspection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disable_schema_introspection { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomResolver
    {
        /// <summary>
        /// The custom resolver's unique ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _id { get; set; }

        /// <summary>
        /// The resolver function's unique ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("function_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Function_id { get; set; }

        /// <summary>
        /// The name of the resolver's parent type. This can be
        /// <br/>`"Query"`, `"Mutation"`, or the name of a generated type if
        /// <br/>this is a computed property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("on_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string On_type { get; set; }

        /// <summary>
        /// The name of the custom resolver field that appears in the GraphQL schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Field_name { get; set; }

        /// <summary>
        /// The type of the custom resolver's `input` parameter. This
        /// <br/>can be a scalar, the name of an existing generated type, or
        /// <br/>a custom JSON schema object. If undefined, the resolver does
        /// <br/>not accept an input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("input_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Input_type { get; set; }

        /// <summary>
        /// The kind of input type the custom resolver uses. This value
        /// <br/>must agree with the value of `input_type`:
        /// <br/>
        /// <br/>- A scalar input type must use `"scalar"` or `"scalar-list"`
        /// <br/>- A generated input type must use `"generated"` or `"generated-list"`
        /// <br/>- A custom input type must use `"custom"`
        /// <br/>
        /// <br/>If undefined, the resolver does not accept an input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("input_type_format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomResolverInput_type_format Input_type_format { get; set; }

        /// <summary>
        /// The type of the value returned by the custom resolver. This
        /// <br/>can be a scalar, the name of an existing generated type, or
        /// <br/>a custom JSON schema object.
        /// <br/>
        /// <br/>If undefined, the resolver returns a `DefaultPayload`
        /// <br/>object:
        /// <br/>
        /// <br/>```graphql
        /// <br/>type DefaultPayload {
        /// <br/>  status: String!
        /// <br/>}
        /// <br/>```
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payload_type { get; set; }

        /// <summary>
        /// The kind of payload type the custom resolver uses. This value
        /// <br/>must agree with the value of `payload_type`:
        /// <br/>
        /// <br/>- A scalar payload type must use `"scalar"` or `"scalar-list"`
        /// <br/>- A generated payload type must use `"generated"` or `"generated-list"`
        /// <br/>- A custom payload type must use `"custom"`
        /// <br/>
        /// <br/>If undefined, the resolver returns a `DefaultPayload` object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload_type_format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomResolverPayload_type_format Payload_type_format { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GraphQLValidationLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STRICT")]
        STRICT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OFF")]
        OFF = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GraphQLValidationAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WARN")]
        WARN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GraphQLValidationSettings
    {
        [Newtonsoft.Json.JsonProperty("read_validation_action", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GraphQLValidationAction Read_validation_action { get; set; }

        [Newtonsoft.Json.JsonProperty("read_validation_level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GraphQLValidationLevel Read_validation_level { get; set; }

        [Newtonsoft.Json.JsonProperty("write_validation_action", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GraphQLValidationAction Write_validation_action { get; set; }

        [Newtonsoft.Json.JsonProperty("write_validation_level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GraphQLValidationLevel Write_validation_level { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NullTypeSchemaValidationSetting
    {
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An EJSON schema validation error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ValidationError
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 33,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AppLog
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"NJsonSchema.JsonSchema")]
        NJsonSchema_JsonSchema = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Logs
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrivateEndpoint
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// The cloud provider region that hosts the private endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cloud_provider_region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cloud_provider_region { get; set; }

        /// <summary>
        /// The private endpoint ID from the cloud provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cloud_provider_endpoint_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cloud_provider_endpoint_id { get; set; }

        /// <summary>
        /// An optional comment that describes the endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrivateEndpointServiceInfo
    {
        [Newtonsoft.Json.JsonProperty("cloud_provider_region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cloud_provider_region { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("dns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dns { get; set; }

        [Newtonsoft.Json.JsonProperty("service_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("apiKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Product
    {

        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas")]
        Atlas = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"data-api")]
        DataApi = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Product2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas")]
        Atlas = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"data-api")]
        DataApi = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DATABASE")]
        DATABASE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHENTICATION")]
        AUTHENTICATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED")]
        SCHEDULED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SYNCTRANSLATOR")]
        SYNCTRANSLATOR = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {
        /// <summary>
        /// If `true`, resumes the trigger without
        /// <br/>processing missed events. Otherwise, attempts to resume the 
        /// <br/>trigger from the first change event after it failed by using 
        /// <br/>a resume token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disable_token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disable_token { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {
        /// <summary>
        /// The name of the database that contains the collection to validate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("database_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Database_name { get; set; }

        /// <summary>
        /// The name of the collection to validate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collection_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Collection_name { get; set; }

        /// <summary>
        /// The EJSON schema to validate sampled documents against.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from_schema", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object From_schema { get; set; } = new object();

        /// <summary>
        /// A [MongoDB query](https://www.mongodb.com/docs/manual/tutorial/query-documents/)
        /// <br/>that matches documents in the collection. The result of running this query is the
        /// <br/>sample population. Use this to narrow the sample to a subset of documents in the
        /// <br/>collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Query { get; set; }

        /// <summary>
        /// The maximum number of documents to sample.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Limit { get; set; } = 10000D;

        /// <summary>
        /// A [MongoDB sort](https://www.mongodb.com/docs/manual/reference/method/cursor.sort/) for the collection.
        /// <br/>Use this to determine which end of a range query to start sampling from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Sort { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body4 : DefaultRule
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body5
    {
        /// <summary>
        /// The name of the database that contains the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("database_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Database_name { get; set; }

        /// <summary>
        /// The name of the collection to sample and generate a schema for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collection_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Collection_name { get; set; }

        /// <summary>
        /// The maximum number of documents to include in the sample.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body6
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body7
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body8
    {
        /// <summary>
        /// The new email for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body9
    {
        /// <summary>
        /// The service to use when calling this function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service { get; set; }

        /// <summary>
        /// The name of the function you want to run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Any arguments that your function needs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Arguments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body10
    {
        /// <summary>
        /// This JSON expression must evaluate to `true` before the function may
        /// <br/>run. If this field is blank, it will evaluate to `true`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eval_source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eval_source { get; set; }

        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Source { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body11
    {
        /// <summary>
        /// The value of the IP address or CIDR block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }

        /// <summary>
        /// An optional comment included in the Access List entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body12
    {
        /// <summary>
        /// The modified value of the IP address or CIDR block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }

        /// <summary>
        /// An optional comment included in the Access List entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body13
    {
        /// <summary>
        /// Set to `true` to allow non-VPC requests.
        /// <br/>Set to `false` to restrict non-VPC requests.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_non_vpc_client_requests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_non_vpc_client_requests { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TRIGGER_FAILURE")]
        TRIGGER_FAILURE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DB_TRIGGER")]
        DB_TRIGGER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH_TRIGGER")]
        AUTH_TRIGGER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED_TRIGGER")]
        SCHEDULED_TRIGGER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FUNCTION")]
        FUNCTION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_FUNCTION")]
        SERVICE_FUNCTION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"STREAM_FUNCTION")]
        STREAM_FUNCTION = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_STREAM_FUNCTION")]
        SERVICE_STREAM_FUNCTION = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"WEBHOOK")]
        WEBHOOK = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ENDPOINT")]
        ENDPOINT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PUSH")]
        PUSH = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"API")]
        API = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"API_KEY")]
        API_KEY = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GRAPHQL")]
        GRAPHQL = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SYNC_CONNECTION_START")]
        SYNC_CONNECTION_START = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SYNC_CONNECTION_END")]
        SYNC_CONNECTION_END = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SYNC_SESSION_START")]
        SYNC_SESSION_START = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SYNC_SESSION_END")]
        SYNC_SESSION_END = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"SYNC_CLIENT_WRITE")]
        SYNC_CLIENT_WRITE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SYNC_ERROR")]
        SYNC_ERROR = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"SYNC_OTHER")]
        SYNC_OTHER = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEMA_ADDITIVE_CHANGE")]
        SCHEMA_ADDITIVE_CHANGE = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEMA_GENERATION")]
        SCHEMA_GENERATION = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEMA_VALIDATION")]
        SCHEMA_VALIDATION = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"LOG_FORWARDER")]
        LOG_FORWARDER = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body14
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body15
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body16
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body17
    {
        /// <summary>
        /// The name of the deployment. To deploy a draft
        /// <br/>without a name, use an empty string.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body18
    {
        [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AppEnvironment Environment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body19
    {
        /// <summary>
        /// Set to `true` to enable App Services Hosting.
        /// <br/>Set to `false` to disable App Services Hosting.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body20
    {
        /// <summary>
        /// The current resource path of the asset to move. Must be used with
        /// <br/>`move_to`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("move_from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Move_from { get; set; }

        /// <summary>
        /// The resource path to which the asset will move. Must be used with
        /// <br/>`move_from`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("move_to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Move_to { get; set; }

        /// <summary>
        /// The current resource path of the asset to copy. Must be used with
        /// <br/>`copy_to`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copy_from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copy_from { get; set; }

        /// <summary>
        /// The resource path to which the asset will be copied. Must be used with
        /// <br/>`copy_from`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copy_to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copy_to { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body21
    {
        /// <summary>
        /// An [asset metadata
        /// <br/>document](https://www.mongodb.com/docs/realm/admin/api/v3#std-label-asset-metadata-document)
        /// <br/>(encoded as JSON).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssetMetadata Meta { get; set; }

        /// <summary>
        /// The asset file to upload (encoded as binary).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] File { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body22
    {
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadataAttribute> Attributes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Granularity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P31D")]
        P31D = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PT1H")]
        PT1H = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Granularity2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P31D")]
        P31D = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PT1H")]
        PT1H = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body23
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// A valid [schema](https://www.mongodb.com/docs/realm/schemas) for the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Schema { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SchemaMetadata Metadata { get; set; } = new SchemaMetadata();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body24
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// A valid [schema](https://www.mongodb.com/docs/realm/schemas) for the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Schema { get; set; } = new object();

        /// <summary>
        /// Relationships to foreign collections. Each field name is a property in the schema. The corresponding value is a [relationship](https://www.mongodb.com/docs/realm/schemas/relationships/) definition for that field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Relationship> Relationships { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaMetadata Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body25
    {
        /// <summary>
        /// A stringified `.graphql` file that contains one or
        /// <br/>more valid GraphQL operations for your API. If more
        /// <br/>than one operation is defined, you must specify
        /// <br/>which operation to run in `operationName`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }

        /// <summary>
        /// A stringified JSON object where each field name maps
        /// <br/>a value to a variable in the specified operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Variables { get; set; }

        /// <summary>
        /// The name of the GraphQL operation specified in
        /// <br/>`query` to run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        /// <summary>
        /// An access token you may provide in the `Authorization` header of API
        /// <br/>requests. [The App Services API Authentication section](#section/Get-Authentication-Tokens) demonstrates how to use this token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("access_token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Access_token { get; set; }

        /// <summary>
        /// A refresh token you may provide in the `Authorization` header of
        /// <br/>[POST auth/session](#section/adminCreateSession)
        /// <br/>to obtain a new `access_token` for the current user session.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refresh_token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refresh_token { get; set; }

        /// <summary>
        /// The unique `_id` value of the MongoDB Cloud user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {
        [Newtonsoft.Json.JsonProperty("access_token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Access_token { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request did not use bearer token
    /// <br/>authentication with a valid refresh token. Make
    /// <br/>sure the Authorization header contains the
    /// <br/>`refresh_token`, not the `access_token`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3 : Error
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error { get; set; }

    }

    /// <summary>
    /// The request did not use bearer token
    /// <br/>authentication with a valid refresh token. Make
    /// <br/>sure the Authorization header contains the
    /// <br/>`refresh_token`, not the `access_token`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4 : Error
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; set; }

        [Newtonsoft.Json.JsonProperty("resource_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Resource_id { get; set; }

        /// <summary>
        /// The last time a batch was processed from the event stream.
        /// <br/>
        /// <br/>The value of `completed_at` should be relatively
        /// <br/>close to the current time. If `completed_at` is
        /// <br/>not updating over time, it might mean that the
        /// <br/>event processor (e.g. Device Sync) is down or
        /// <br/>stuck.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completed_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Completed_at { get; set; }

        /// <summary>
        /// The time of the latest event in the most recently processed batch.
        /// <br/>
        /// <br/>If the value of `cluster_time` is significantly
        /// <br/>earlier than the `completed_at` time, the event
        /// <br/>processor (e.g. Device Sync) is lagging behind the event .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cluster_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Cluster_time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6
    {
        /// <summary>
        /// A description of the error that App Services encountered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Errors> Errors { get; set; }

        /// <summary>
        /// The total number of documents that were sampled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_processed_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Total_processed_count { get; set; }

        /// <summary>
        /// The total number of documents that failed any validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_error_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Total_error_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response8
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response9 : BasicError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Response9Error Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response10 : BasicError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Response10Error Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response11 : BasicError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Response11Error Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response12 : BasicError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Response12Error Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response13
    {
        /// <summary>
        /// The generated JSON schema
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response14 : Error
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error { get; set; }

        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error_code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        /// <summary>
        /// The unique pending user account ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("domain_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Domain_id { get; set; }

        /// <summary>
        /// A list of identities associated with the pending user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("login_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Login_ids> Login_ids { get; set; } = new System.Collections.ObjectModel.Collection<Login_ids>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response15
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error { get; set; }

        [Newtonsoft.Json.JsonProperty("logs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Logs { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Result { get; set; }

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats Stats { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response16
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error { get; set; }

        [Newtonsoft.Json.JsonProperty("logs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Logs { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Result { get; set; }

        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats2 Stats { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response17
    {
        /// <summary>
        /// ObjectID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// net.IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        /// <summary>
        /// net.IPNet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Network { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response18
    {
        /// <summary>
        /// ObjectID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// net.IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        /// <summary>
        /// net.IPNet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Network { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response19
    {
        /// <summary>
        /// The list of metrics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Measurements> Measurements { get; set; } = new System.Collections.ObjectModel.Collection<Measurements>();

        /// <summary>
        /// The app ID sent in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("app_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string App_id { get; set; }

        /// <summary>
        /// The app's human-readable name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("app_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string App_name { get; set; }

        /// <summary>
        /// The group ID sent in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Group_id { get; set; }

        /// <summary>
        /// The date and time (ISO-8601 format) of the earliest requested measurement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Start { get; set; }

        /// <summary>
        /// The date and time (ISO-8601 format) of the latest requested measurement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string End { get; set; }

        /// <summary>
        /// The requested granularity of the metrics in [ISO-8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("granularity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Granularity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response20
    {
        /// <summary>
        /// At most 100 results per request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<AppLog> Logs { get; set; }

        /// <summary>
        /// The end date and time of the next page of log entries in ISO 8601
        /// <br/>format. App Services paginates the result sets of queries that match
        /// <br/>more than 100 log entries and includes this field in paginated
        /// <br/>responses. To get the next page of up to 100 entries, pass this value as
        /// <br/>the `end_date` parameter in a subsequent request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextEndDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NextEndDate { get; set; }

        /// <summary>
        /// The offset into the next page of log entries in ISO 8601 format. MongoDB
        /// <br/>App Services paginates the result sets of queries that match more than 100 log
        /// <br/>entries and includes this field in paginated responses where the first
        /// <br/>entry on the next page has the same timestamp as the last entry on this
        /// <br/>page. To get the next page of up to 100 entries, pass this value, if it
        /// <br/>is present, as the `skip` parameter in a subsequent request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextSkip", Required = Newtonsoft.Json.Required.Always)]
        public int NextSkip { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response21
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response22
    {
        /// <summary>
        /// Unique identifier for the function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        /// <summary>
        /// Name for the function specified in the `name` field of the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response23 : Error
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error { get; set; }

        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error_code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response24 : Error
    {
        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Error_code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response25
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response26
    {
        /// <summary>
        /// The [RFC 3339](https://tools.ietf.org/html/3339) date and time of the
        /// <br/>start of the query period, which can be specified with the `start` query
        /// <br/>parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start { get; set; }

        /// <summary>
        /// The [RFC 3339](https://tools.ietf.org/html/3339) date and time of the
        /// <br/>end of the query period, which can be specified with the `end` query
        /// <br/>parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string End { get; set; }

        /// <summary>
        /// The granularity, which can be specified with the `granularity` query
        /// <br/>parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("granularity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Granularity { get; set; }

        /// <summary>
        /// The Atlas [Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        /// <summary>
        /// The array of measurements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Measurements2> Measurements { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response27
    {
        /// <summary>
        /// The RFC 3339 date and time of the start of the query period, which can
        /// <br/>be specified with the `start` query parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start { get; set; }

        /// <summary>
        /// The RFC 3339 date and time of the end of the query period, which can be
        /// <br/>specified with the `end` query parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string End { get; set; }

        /// <summary>
        /// The granularity, which can be specified with the `granularity` query
        /// <br/>parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("granularity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Granularity { get; set; }

        /// <summary>
        /// The Atlas [Group
        /// <br/>ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        /// <summary>
        /// The Atlas App Services App ID specified by the `appId` path parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppId { get; set; }

        /// <summary>
        /// The name of the Atlas App Services App specified by the `appId` path parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppName { get; set; }

        /// <summary>
        /// The array of measurements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Measurements3> Measurements { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous2
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaMetadata Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response28
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaMetadata Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response29
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous3 : Endpoint
    {
        [Newtonsoft.Json.JsonProperty("function_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Function_name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response30 : Endpoint
    {
        [Newtonsoft.Json.JsonProperty("function_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Function_name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response31 : Endpoint
    {
        [Newtonsoft.Json.JsonProperty("function_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Function_name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response32 : Endpoint
    {
        [Newtonsoft.Json.JsonProperty("function_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Function_name { get; set; }

    }

    /// <summary>
    /// The result of the specified operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response33
    {
        /// <summary>
        /// The result of a successful operation. If `null`, the operation had errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.AllowNull)]
        public object Data { get; set; }

        /// <summary>
        /// A list of errors encountered while running an operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Errors2> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeploymentMigrationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"started")]
        Started = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"downtime")]
        Downtime = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"enabling_event_subscriptions")]
        Enabling_event_subscriptions = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"cleanup")]
        Cleanup = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"successful")]
        Successful = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AppInstanceProduct
    {

        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas")]
        Atlas = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"data-api")]
        DataApi = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Automatic_deployment
    {
        /// <summary>
        /// If `true`, the app automatically deploys using the method defined for `provider`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        /// <summary>
        /// The type of automatic deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Automatic_deploymentProvider Provider { get; set; }

        /// <summary>
        /// The unique ID values of automatic deployment provider
        /// <br/>installations. For example, the `id` value of a [GitHub app
        /// <br/>installation](https://docs.github.com/en/rest/apps/installations).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("installation_ids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Installation_ids { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Hosting_files_diff
    {
        [Newtonsoft.Json.JsonProperty("added", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Added { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Deleted { get; set; }

        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Modified { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointHttp_method
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"*")]
        _ = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointValidation_method
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_VALIDATION")]
        NO_VALIDATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SECRET_AS_QUERY_PARAM")]
        SECRET_AS_QUERY_PARAM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFY_PAYLOAD")]
        VERIFY_PAYLOAD = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Values
    {
        [Newtonsoft.Json.JsonProperty("none", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnyValue None { get; set; }

        [Newtonsoft.Json.JsonProperty("development", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnyValue Development { get; set; }

        [Newtonsoft.Json.JsonProperty("testing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnyValue Testing { get; set; }

        [Newtonsoft.Json.JsonProperty("qa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnyValue Qa { get; set; }

        [Newtonsoft.Json.JsonProperty("production", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnyValue Production { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataApiConfigValidation_method
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_VALIDATION")]
        NO_VALIDATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SECRET_AS_QUERY_PARAM")]
        SECRET_AS_QUERY_PARAM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFY_PAYLOAD")]
        VERIFY_PAYLOAD = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config
    {
        /// <summary>
        /// The service ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clusterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClusterId { get; set; }

        /// <summary>
        /// The cluster name of the data source within. The name may be at 
        /// <br/>most 64 characters long and must only contain ASCII letters, numbers,
        /// <br/>underscores, and hyphens.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clusterName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClusterName { get; set; }

        /// <summary>
        /// The type of service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clusterType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfigClusterType ClusterType { get; set; }

        [Newtonsoft.Json.JsonProperty("flexible_sync", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlexibleSync Flexible_sync { get; set; }

        /// <summary>
        /// The name of the group that contains the service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        /// <summary>
        /// The name of the organization that contains the service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orgName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrgName { get; set; }

        /// <summary>
        /// The [read preference](https://www.mongodb.com/docs/atlas/app-services/mongodb/read-preference/) mode for read requests to the data source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("readPreference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfigReadPreference ReadPreference { get; set; }

        /// <summary>
        /// If true, clients may [connect to the app over the MongoDB Wire Protocol](https://www.mongodb.com/docs/atlas/app-services/mongodb/wire-protocol/#connect-over-the-wire-protocol).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wireProtocolEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WireProtocolEnabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreateDataSourceName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mongodb-atlas")]
        MongodbAtlas = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreateDataSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mongodb-atlas")]
        MongodbAtlas = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config2
    {
        /// <summary>
        /// The name of the service to create. The name may be at most 64 
        /// <br/>characters long and must only contain ASCII letters, numbers,
        /// <br/>underscores, and hyphens.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clusterName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClusterName { get; set; }

        /// <summary>
        /// The type of service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clusterType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClusterType { get; set; }

        [Newtonsoft.Json.JsonProperty("flexible_sync", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlexibleSync Flexible_sync { get; set; }

        /// <summary>
        /// The name of the group that contains the service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        /// <summary>
        /// The name of the organization that contains the service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orgName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrgName { get; set; }

        /// <summary>
        /// The [read preference](https://www.mongodb.com/docs/atlas/app-services/mongodb/read-preference/) mode for read requests to the data source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("readPreference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Config2ReadPreference ReadPreference { get; set; }

        /// <summary>
        /// Target read operations to specific members of a replica set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("readPreferenceTagSets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ReadPreferencesTagSet> ReadPreferenceTagSets { get; set; }

        /// <summary>
        /// If true, clients may [connect to the app over the MongoDB Wire Protocol](https://www.mongodb.com/docs/atlas/app-services/mongodb/wire-protocol/#connect-over-the-wire-protocol).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wireProtocolEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WireProtocolEnabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AtlasFederatedInstanceName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mongodb-datafederation")]
        MongodbDatafederation = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AtlasFederatedInstanceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"datalake")]
        Datalake = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config3
    {
        /// <summary>
        /// The service name used to refer to the Federated database
        /// <br/>instance within this Atlas app. The name may be at most
        /// <br/>64 characters long and must only contain ASCII letters,
        /// <br/>numbers, underscores, and hyphens.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataLakeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DataLakeName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ThirdPartyServiceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"aws")]
        Aws = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"twilio")]
        Twilio = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"github")]
        Github = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"gcm")]
        Gcm = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LogForwardingPolicyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"single")]
        Single = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"batch")]
        Batch = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LogForwardingActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"collection")]
        Collection = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"function")]
        Function = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Options
    {
        [Newtonsoft.Json.JsonProperty("secret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret { get; set; }

        [Newtonsoft.Json.JsonProperty("secretAsQueryParam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SecretAsQueryParam { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdminUserType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"server")]
        Server = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Roles
    {
        [Newtonsoft.Json.JsonProperty("role_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role_name { get; set; }

        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"server")]
        Server = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SyncDataResponseReadPreference
    {

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"primaryPreferred")]
        PrimaryPreferred = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"secondary")]
        Secondary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"secondaryPreferred")]
        SecondaryPreferred = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"nearest")]
        Nearest = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Event_processors
    {
        [Newtonsoft.Json.JsonProperty("FUNCTION", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FUNCTION FUNCTION { get; set; }

        [Newtonsoft.Json.JsonProperty("AWS_EVENTBRIDGE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AWS_EVENTBRIDGE AWS_EVENTBRIDGE { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DatabaseTriggerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DATABASE")]
        DATABASE = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config4
    {
        /// <summary>
        /// The _id value of a linked MongoDB data source.
        /// <br/>
        /// <br/>See [Get a Data Source](#operation/adminGetService).
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("service_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Service_id { get; set; }

        /// <summary>
        /// The name of a database in the linked data source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("database", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Database { get; set; }

        /// <summary>
        /// The name of a collection in the specified database. The
        /// <br/>trigger listens to events from this collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Collection { get; set; }

        /// <summary>
        /// The type(s) of MongoDB change event that the trigger listens for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation_types", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Operation_types> Operation_types { get; set; } = new System.Collections.ObjectModel.Collection<Operation_types>();

        /// <summary>
        /// A [$match](https://www.mongodb.com/docs/manual/reference/operator/aggregation/match)
        /// <br/>expression filters change events. The trigger will only
        /// <br/>fire if the expression evaluates to true for a given
        /// <br/>change event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("match", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Match { get; set; } = new object();

        /// <summary>
        /// A [$project](https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/) 
        /// <br/>expression returns only the specified fields. You can include 
        /// <br/>or exclude specific fields, or include newly-computed fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Project { get; set; }

        /// <summary>
        /// If `true`, indicates that `UPDATE` change events should
        /// <br/>include the most current
        /// <br/>[majority-committed](https://www.mongodb.com/docs/manual/reference/read-concern-majority/)
        /// <br/>version of the modified document in the `fullDocument`
        /// <br/>field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("full_document", Required = Newtonsoft.Json.Required.Always)]
        public bool Full_document { get; set; } = false;

        /// <summary>
        /// If true, indicates that `UPDATE` change events should
        /// <br/>include a snapshot of the modified document from
        /// <br/>immediately before the update was applied.
        /// <br/>
        /// <br/>You must enable [document
        /// <br/>preimages](https://www.mongodb.com/docs/atlas/app-services/mongodb/preimages/)
        /// <br/>for your cluster to include these snapshots.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("full_document_before_change", Required = Newtonsoft.Json.Required.Always)]
        public bool Full_document_before_change { get; set; } = false;

        /// <summary>
        /// If `true`, enabling the Trigger after it was disabled
        /// <br/>will not invoke events that occurred while the Trigger
        /// <br/>was disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_catchup_events", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Skip_catchup_events { get; set; } = false;

        /// <summary>
        /// If `true`, when this Trigger's resume token
        /// <br/>cannot be found in the cluster's oplog, the Trigger automatically resumes
        /// <br/>processing events at the next relevant change stream event.
        /// <br/>All change stream events from when the Trigger was suspended until the Trigger
        /// <br/>resumes execution do not have the Trigger fire for them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tolerate_resume_errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Tolerate_resume_errors { get; set; } = false;

        /// <summary>
        /// If `true`, the trigger will use the [maximize 
        /// <br/>throughput](https://www.mongodb.com/docs/atlas/app-services/triggers/database-triggers/#std-label-triggers-maximum-throughput) 
        /// <br/>option. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximum_throughput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Maximum_throughput { get; set; } = false;

        /// <summary>
        /// If `true`, event ordering is disabled and this Trigger
        /// <br/>can process events in parallel. If `false`, event
        /// <br/>ordering is enabled and the Trigger executes events
        /// <br/>serially.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unordered", Required = Newtonsoft.Json.Required.Always)]
        public bool Unordered { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthenticationTriggerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHENTICATION")]
        AUTHENTICATION = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config5
    {
        /// <summary>
        /// The type of authentication event that the trigger listens for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Config5Operation_type Operation_type { get; set; }

        /// <summary>
        /// The type(s) of authentication provider that the trigger listens to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("providers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Config5Providers Providers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScheduledTriggerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED")]
        SCHEDULED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config6
    {
        /// <summary>
        /// A [cron expression](https://www.mongodb.com/docs/atlas/app-services/triggers/scheduled-triggers/#cron-expressions) that specifies when the trigger executes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Schedule { get; set; }

        /// <summary>
        /// If `true`, enabling the trigger after it was disabled
        /// <br/>will not invoke events that occurred while the trigger
        /// <br/>was disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_catchup_events", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Skip_catchup_events { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HostingConfigurationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"setup_ok")]
        Setup_ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"change_in_progress")]
        Change_in_progress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"change_failed")]
        Change_failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"change_failed_fatal")]
        Change_failed_fatal = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Default_domain
    {
        [Newtonsoft.Json.JsonProperty("provider_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider_type { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config7 Config { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomResolverInput_type_format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"scalar")]
        Scalar = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"scalar-list")]
        ScalarList = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"generated")]
        Generated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"generated-list")]
        GeneratedList = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomResolverPayload_type_format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"scalar")]
        Scalar = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"scalar-list")]
        ScalarList = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"generated")]
        Generated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"generated-list")]
        GeneratedList = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Errors
    {
        /// <summary>
        /// The type of the schema validation error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValidationError Error_code { get; set; }

        /// <summary>
        /// The number of sampled documents that failed this validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Error_count { get; set; }

        /// <summary>
        /// The path of the field that failed this validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// A list of the `_id` values for sampled documents that failed this validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failed_ids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Failed_ids { get; set; }

        /// <summary>
        /// A MongoDB query filter that matches sampled documents that failed this validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failed_documents_query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Failed_documents_query { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response9Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default rule does not exist on service")]
        Default_rule_does_not_exist_on_service = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response10Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default rule already exists")]
        Default_rule_already_exists = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response11Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default rule does not exist")]
        Default_rule_does_not_exist = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service default rule id mismatch")]
        Service_default_rule_id_mismatch = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response12Error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default rule does not exist for app service")]
        Default_rule_does_not_exist_for_app_service = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Login_ids
    {
        [Newtonsoft.Json.JsonProperty("id_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Login_idsId_type Id_type { get; set; }

        /// <summary>
        /// The pending user's username. For example, this is an email/password user's email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stats
    {
        [Newtonsoft.Json.JsonProperty("execution_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Execution_time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stats2
    {
        [Newtonsoft.Json.JsonProperty("execution_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Execution_time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Measurements
    {
        /// <summary>
        /// A set of data points for the given metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data_points", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Data_points> Data_points { get; set; }

        /// <summary>
        /// The name of the metric. For a complete list of
        /// <br/>available metrics and their units, see [App Services
        /// <br/>Metrics
        /// <br/>Reference](https://mongodb.com/docs/atlas/app-services/reference/metrics).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The unit of each data point's `value` property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Measurements2
    {
        /// <summary>
        /// The usage metric represented by each data point. See
        /// <br/>[billing](https://www.mongodb.com/docs/realm/billing).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Measurements2Name Name { get; set; }

        /// <summary>
        /// The unit of the `value` of each data point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Measurements2Units Units { get; set; }

        /// <summary>
        /// The array of data points for this measurement. A finer `granularity`
        /// <br/>results in more data points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data_points", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Data_points2> Data_points { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Measurements3
    {
        /// <summary>
        /// The usage metric represented by each data point. See
        /// <br/>[billing](https://www.mongodb.com/docs/realm/billing).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Measurements3Name Name { get; set; }

        /// <summary>
        /// The unit of the `value` of each data point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Measurements3Units Units { get; set; }

        /// <summary>
        /// The array of data points for this measurement. A finer `granularity`
        /// <br/>results in more data points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data_points", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Data_points3> Data_points { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An error encountered while running an operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Errors2
    {
        /// <summary>
        /// A message that describes the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// A list of one or more locations in the operation that caused the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Locations> Locations { get; set; } = new System.Collections.ObjectModel.Collection<Locations>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Automatic_deploymentProvider
    {

        [System.Runtime.Serialization.EnumMember(Value = @"github")]
        Github = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConfigClusterType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"atlas")]
        Atlas = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"serverless")]
        Serverless = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConfigReadPreference
    {

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"primaryPreferred")]
        PrimaryPreferred = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"secondary")]
        Secondary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"secondaryPreferred")]
        SecondaryPreferred = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"nearest")]
        Nearest = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Config2ReadPreference
    {

        [System.Runtime.Serialization.EnumMember(Value = @"secondary")]
        Secondary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"secondaryPreferred")]
        SecondaryPreferred = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"nearest")]
        Nearest = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FUNCTION
    {
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config8 Config { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AWS_EVENTBRIDGE
    {
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Config9 Config { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Operation_types
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INSERT")]
        INSERT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UPDATE")]
        UPDATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REPLACE")]
        REPLACE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Config5Operation_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOGIN")]
        LOGIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CREATE")]
        CREATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Config5Providers
    {

        [System.Runtime.Serialization.EnumMember(Value = @"anon-user")]
        AnonUser = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"api-key")]
        ApiKey = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"custom-token")]
        CustomToken = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"custom-function")]
        CustomFunction = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"local-userpass")]
        LocalUserpass = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"oauth2-apple")]
        Oauth2Apple = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"oauth2-facebook")]
        Oauth2Facebook = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"oauth2-google")]
        Oauth2Google = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config7
    {
        /// <summary>
        /// Default domain of hosted Atlas App Services App provided by App Services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("app_default_domain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string App_default_domain { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Login_idsId_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data_points
    {
        /// <summary>
        /// The ISO-8601 date and time of the measurement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        /// <summary>
        /// The value of the measurement in the unit
        /// <br/>specified by the metric's `unit` property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Measurements2Name
    {

        [System.Runtime.Serialization.EnumMember(Value = @"request_count")]
        Request_count = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"compute_time")]
        Compute_time = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"data_out")]
        Data_out = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"sync_time")]
        Sync_time = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Measurements2Units
    {

        [System.Runtime.Serialization.EnumMember(Value = @"<empty string>")]
        _empty_string_ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOURS")]
        HOURS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GIGABYTES")]
        GIGABYTES = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data_points2
    {
        /// <summary>
        /// The ISO 8601 date and time of the data point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        /// <summary>
        /// The value at the time in the `unit` of the measurement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Measurements3Name
    {

        [System.Runtime.Serialization.EnumMember(Value = @"request_count")]
        Request_count = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"compute_time")]
        Compute_time = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"data_out")]
        Data_out = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"sync_time")]
        Sync_time = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"mem_usage")]
        Mem_usage = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Measurements3Units
    {

        [System.Runtime.Serialization.EnumMember(Value = @"<empty string>")]
        _empty_string_ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOURS")]
        HOURS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GIGABYTES")]
        GIGABYTES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GIGABYTE_SECONDS")]
        GIGABYTE_SECONDS = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data_points3
    {
        /// <summary>
        /// The ISO 8601 date and time of the data point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }

        /// <summary>
        /// The value at the time in the `unit` of the measurement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The operation line and column numbers that caused an error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Locations
    {
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.Always)]
        public int Line { get; set; }

        [Newtonsoft.Json.JsonProperty("column", Required = Newtonsoft.Json.Required.Always)]
        public int Column { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config8
    {
        /// <summary>
        /// The ID of the function that the trigger calls when it fires.
        /// <br/>
        /// <br/>This value is the same as the root-level `function_id`.
        /// <br/>You can either define the value here or in `function_id`.
        /// <br/>The App Services backend duplicates the value to the configuration location where you did not define it.
        /// <br/>
        /// <br/>For example, if you define `event_processors.FUNCTION.function_id`, the backend duplicates it to `function_id`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("function_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Function_id { get; set; }

        /// <summary>
        /// The name of the function that the trigger calls when it
        /// <br/>fires, i.e. the function described by `function_id`.
        /// <br/>
        /// <br/>This value is the same as the root-level `function_name`.
        /// <br/>You can either define the value here or in `function_name`.
        /// <br/>The App Services backend duplicates the value to the configuration location where you did not define it.
        /// <br/>
        /// <br/>For example, if you define `event_processors.FUNCTION.function_name`, the backend duplicates it to `function_name`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("function_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Function_name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config9
    {
        /// <summary>
        /// An AWS Account ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account_id { get; set; }

        /// <summary>
        /// An AWS region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// If `true`, event objects are serialized using EJSON.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extended_json_enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Extended_json_enabled { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604