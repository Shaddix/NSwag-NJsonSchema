//----------------------
// <auto-generated>
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class UseAttributeInAdditionalInfoDto implements IUseAttributeInAdditionalInfoDto {
    attributeName!: string;

    [key: string]: any;

    protected _discriminator: string;

    constructor(data?: IUseAttributeInAdditionalInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "UseAttributeInAdditionalInfoDto";
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.attributeName = _data["attributeName"];
        }
    }

    static fromJS(data: any): UseAttributeInAdditionalInfoDto {
        data = typeof data === 'object' ? data : {};
        if (data["transformerType"] === "USE_ATTRIBUTE_IN_ADDITIONAL_INFO") {
            let result = new LocationNodeTransformerDto();
            result.init(data);
            return result;
        }
        if (data["transformerType"] === "USE_ATTRIBUTE_IN_ADDITIONAL_INFO2") {
            let result = new LocationNodeTransformerDto2();
            result.init(data);
            return result;
        }
        let result = new UseAttributeInAdditionalInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["transformerType"] = this._discriminator;
        data["attributeName"] = this.attributeName;
        return data;
    }
}

export interface IUseAttributeInAdditionalInfoDto {
    attributeName: string;

    [key: string]: any;
}

export enum LocationNodeTransformerType {
    USE_ATTRIBUTE_IN_ADDITIONAL_INFO = "USE_ATTRIBUTE_IN_ADDITIONAL_INFO",
}

export class LocationNodeTransformerDto extends UseAttributeInAdditionalInfoDto implements ILocationNodeTransformerDto {

    [key: string]: any;

    constructor(data?: ILocationNodeTransformerDto) {
        super(data);
        this._discriminator = "USE_ATTRIBUTE_IN_ADDITIONAL_INFO";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static override fromJS(data: any): LocationNodeTransformerDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationNodeTransformerDto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        super.toJSON(data);
        return data;
    }
}

export interface ILocationNodeTransformerDto extends IUseAttributeInAdditionalInfoDto {

    [key: string]: any;
}

export class LocationNodeTransformerDto2 extends UseAttributeInAdditionalInfoDto implements ILocationNodeTransformerDto2 {
    transformerType2!: LocationNodeTransformerType;

    [key: string]: any;

    constructor(data?: ILocationNodeTransformerDto2) {
        super(data);
        this._discriminator = "USE_ATTRIBUTE_IN_ADDITIONAL_INFO2";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.transformerType2 = _data["transformerType2"];
        }
    }

    static override fromJS(data: any): LocationNodeTransformerDto2 {
        data = typeof data === 'object' ? data : {};
        let result = new LocationNodeTransformerDto2();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["transformerType2"] = this.transformerType2;
        super.toJSON(data);
        return data;
    }
}

export interface ILocationNodeTransformerDto2 extends IUseAttributeInAdditionalInfoDto {
    transformerType2: LocationNodeTransformerType;

    [key: string]: any;
}

export enum LocationCriteriaDto {
    PARENT_ID = "PARENT_ID",
    ATTRIBUTE_PRESENT = "ATTRIBUTE_PRESENT",
}

